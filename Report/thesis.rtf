{\rtf1\ansi\ansicpg1252\cocoartf1347\cocoasubrtf570
{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
\paperw11900\paperh16840\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural

\f0\fs24 \cf0 \\documentclass[a4paper, 12pt, twoside, openany]\{book\}\
\
\\usepackage\{datetime\}\
\\usepackage\{listings\}\
\\usepackage\{color\}\
\\usepackage[table]\{xcolor\}\
\\usepackage[plain]\{algorithm\}\
\\usepackage\{algpseudocode\}\
%\\usepackage\{algorithm2e\}\
\\usepackage\{amssymb,amsmath,amsthm\}\
\\usepackage\{graphicx\}\
\\usepackage[backend=bibtex]\{biblatex\}\
\\usepackage\{textcomp\}\
\\usepackage\{microtype\}\
\\usepackage\{caption,subcaption\}\
\\usepackage\{tabularx\}\
%\\usepackage\{tikz\}\
\\usepackage\{tocbibind\}\
%\\usepackage\{geometry\}\
\\usepackage[top=3cm,bottom=4cm,left=4cm,right=2cm]\{geometry\}\
\\usepackage\{hyperref\}\
\\hypersetup\{\
    %colorlinks=black, % make the links colored\
    %linkcolor=black, % color TOC links in black\
    %urlcolor=black, % color URLs in black\
    linktoc=all % 'all' will create links for everything in the TOC\
\}\
\
\\addbibresource\{references.bib\}\
\
%\\setlength\{\\parskip\}\{\\baselineskip\}%\
%\\setlength\{\\parindent\}\{0pt\}%\
\
%\\linespread\{1.3\}\
\
\\newcommand\{\\tabitem\}\{~~\\llap\{\\textbullet\}~~\}\
\
\\pagestyle\{plain\}\
\
\\definecolor\{ColumnGray\}\{gray\}\{0.9\}\
\\newcolumntype\{a\}\{>\{\\columncolor\{ColumnGray\}\}c\}\
\
\\definecolor\{dkgreen\}\{rgb\}\{0,0.6,0\}\
\\definecolor\{gray\}\{rgb\}\{0.5,0.5,0.5\}\
\\definecolor\{mauve\}\{rgb\}\{0.58,0,0.82\}\
\
\\definecolor\{pred\}\{rgb\}\{0.9,0,0\}\
\
\\definecolor\{javared\}\{rgb\}\{0.6,0,0\} % for strings\
\\definecolor\{javagreen\}\{rgb\}\{0.25,0.5,0.35\} % comments\
\\definecolor\{javapurple\}\{rgb\}\{0.5,0,0.35\} % keywords\
\\definecolor\{javadocblue\}\{rgb\}\{0.25,0.35,0.75\} % javadoc\
\
\\lstset\{frame=tb,\
  language=Java,\
  aboveskip=3mm,\
  belowskip=3mm,\
  showstringspaces=false,\
  columns=flexible,\
  basicstyle=\{\\small\\ttfamily\},\
  numbers=none,\
  numberstyle=\\tiny\\color\{gray\},\
  keywordstyle=\\color\{javapurple\},\
  commentstyle=\\color\{javagreen\},\
  stringstyle=\\color\{blue\},\
  breaklines=true,\
  breakatwhitespace=true,\
  tabsize=2,\
  basicstyle=\\tiny\
\}\
\
\
%\\title\{Master Thesis\}% \\\\ \\vspace\{2 mm\} \{\\large Group 4\}\}\
%\\author\{\
%    Rusvik, Johan Alexander\\\\\
%    \\texttt\{johan.rusvik@student.uib.no\}\
%\}\
%\\date\{\\today\}\
\
%\\pagenumbering\{roman\}\
\
\\begin\{document\}\
\\frontmatter\
\
%\\maketitle\
\\newgeometry\{margin=1in\}\
\\begin\{titlepage\}\
\
\\newcommand\{\\HRule\}\{\\rule\{\\linewidth\}\{0.5mm\}\} % Defines a new command for the horizontal lines, change thickness here\
\
\\center % Center everything on the page\
%pic size: 0.32\
\\includegraphics[scale=0.3]\{pictures/uib-logo2.png\}\\\\%[0.1cm] % Include a department/university logo - this will require the graphicx package\
\
%\\textsc\{\\LARGE Bergen University\}\\\\[1.5cm] % Name of your university/college\
\\textsc\{\\Large Department of Informatics\\\\Algorithms\}\\\\[0.6cm] % Major heading such as course name\
\{ \\Large \\bfseries Master Thesis\}\\\\[0.5cm]\
%\\textsc\{\\large Minor Hading\}\\\\[0.5cm] % Minor heading such as course title\
\
\\HRule \\\\[0.4cm]\
\{ \\huge \\bfseries Localizing Cell Towers from Crowdsourced Measurements\}\\\\[0.3cm] % Title of your document\
\\HRule \\\\[0.5cm]\
\
\\begin\{minipage\}\{0.4\\textwidth\}\
\\begin\{flushleft\} \\large\
\\emph\{Author:\}\\\\\
Johan Alexander Nordstrand \\textsc\{Rusvik\}\\\\ % Your name\
\\end\{flushleft\}\
\\end\{minipage\}\
~\
\\begin\{minipage\}\{0.4\\textwidth\}\
\\begin\{flushright\} \\large\
\\emph\{Supervisor:\} \\\\\
Prof. Jan Arne \\textsc\{Telle\}\\\\ % Supervisor's Name\
Dep. of Informatics\\\\\
\\emph\{Co-Supervisor:\} \\\\\
Prof. Hans K. \\textsc\{Hvide\}\\\\\
Dep. of Economics\\\\\
\\end\{flushright\}\
\\end\{minipage\}\\\\[1.5cm]\
\
% If you don't want a supervisor, uncomment the two lines below and remove the section above\
%\\Large \\emph\{Author:\}\\\\\
%John \\textsc\{Smith\}\\\\[3cm] % Your name\
\
\
\{\\large \\today\}%\\\\[3cm] % Date, change the \\today to a set date if you want to be precise\
\
\
\\vfill % Fill the rest of the page with whitespace\
\
\\end\{titlepage\}\
\\restoregeometry\
\
\
\\chapter*\{Abstract\}\
Today, several internet sites exist that aim to provide the locations and number of cellular network antennas worldwide. For example \\cite\{opencellid\}, \\cite\{opensignal\} and \\cite\{cellmapper\}. What makes this task difficult to accomplish is the lack of information available about the whereabouts and number of antennas. Only in a few countries are correct locations for some cellular network antennas known. Otherwise, these sites base their knowledge about cellular network antenna locations on measurement data collected from crowdsourcing. OpenCellID uses a simple and primitive algorithm for estimating antenna locations based on such measurements. In this thesis we suggest an alternative approach to localize cellular network antennas based on data provided by OpenCellID.\
\
We start by giving an introduction to the problem, and give a brief overview of related work. This includes localization of mobile devices in addition to localization of cellular network antennas. We then present some background information for our algorithm development. Next we develop two similar algorithms for localizing cellular network antennas. One utilizes distance between measurements, the other utilizes Received Signal Strength (RSS) values among measurements. We experiment with the two algorithms on theoretical generated test data, and argue that utilizing RSS gives the most accurate estimated antenna locations.\
\
Next we present the OpenCellID data. We explore this data in detail before defining two subsets we will test our two algorithms on. One subset contains measurement data where correct antenna locations are known. The other contains measurement data for antennas in the Bergen City Center area. We then estimate cellular network antenna locations with our two algorithms for the two subsets. Our tests will show that utilizing RSS estimates more accurate antenna locations when correct antenna locations are known and can be compared to. We end the thesis by analyzing two measurement distribution patterns, and propose how the algorithms can be improved.\
\
\\chapter*\{Acknowledgements\}\
Foremost, I want to thank my supervisor Jan Arne Telle. Without his invaluable contribution of ideas and advice, this thesis would have been impossible to complete.\
\
I would also like to thank my co-supervisor Hans K. Hvide for relevant discussions as well as introducing me to the problem at hand.\
\
I want to thank Markus Semm and Krzysztof Ociepa at OpenCellID.org for providing knowledge and explanations about the OpenCellID data.\
\
Many thanks go to lecturers and the administration at the Departement of Informatics for providing an excellent student environment, both for learning and festivities.\
\
Last but not least, I want to thank my family, friends and the rest of the student community for all the good times during my five years as a student at the University of Bergen.\
\
\
\\newpage\
\\tableofcontents\
\
%\\newpage\
%\\listoffigures\
\
%\\newpage\
%\\listoftables\
\
\\newpage\
\\listofalgorithms\
\\let\\cleardoublepage\\clearpage\
\\addcontentsline\{toc\}\{chapter\}\{List of Algorithms\}\
\
\\mainmatter\
\
\\newpage\
\\newgeometry\{top=3cm,bottom=4cm,left=2cm,right=4cm\}\
\\chapter\{Introduction\}\
%\\pagenumbering\{arabic\}\
\
In this chapter we explain the background and motivation for our work, present our research goals, present some fundamental terminology, and give an outline of the thesis.\
\
\\section\{Motivation and Background\}\
\\label\{sect:motivation\}\
Have you ever wondered where your mobile phone receives it signal from? Who can honestly say they have spotted an antenna transmitting such signals? Would the regular citizen recognize such an antenna, even if he saw one?\
\
No one can reject that instant communication through mobile devices are becoming more and more a part of our society. The number of devices connected to the cellular network is increasing and the demand for good reception is growing. In urban areas the general citizen might get frustrated if she is disconnected from the network unwillingly for just a second. Users expect to be able to surf the internet inside car tunnels made of concrete, or make phone calls below the ground while riding the subway. But how is this possible? To communicate with the outside world through the cell phone requires the phone to be connected to the cellular network. This means it needs to receive a signal from somewhere. These signals originate from antennas that are placed all over the world. How many antennas are there and where are they located?\
\
There are several internet sites that attempt to answer this question. For example \\textit\{opensignal.com\} \\cite\{opensignal\}, \\textit\{cellmapper.net\} \\cite\{cellmapper\} and \\textit\{opencellid.org\} \\cite\{opencellid\}. Their goal is to show exactly where the antennas that broadcast cell signals are located. They provide quite accurate antenna locations but not correct, at least in most cases. What makes this goal difficult to accomplish is that the cellular network providers are not obliged to provide data about the antenna locations. Only in a few specific countries are some correct cellular network antanna locations known. So how can these sites know where the rest of the antennas are located? The answer is \\textit\{crowdsourcing\} \\cite\{crowdsourcing\}.\
\
Crowdsourcing involves using a large crowd of people to accomplish a task or solve a problem. The word means \\textit\{to outsource something to an undefined crowd\}. The people in such crowds do not usually know each other, like online communities or the public in general. When a crowdsourcing process is set in motion, the originator makes a request to the targetted crowd. The request may for example concern ideas, feedback or content.\
\
These sites provide smart phone applications mobile users can download. The applications gather data about the antenna the phone is connected to, the strength of the received signal, and the location of the smart phone. This collection of data, also called a \\textit\{measurement\}, is then transmitted to a database. We will define a measurement more thouroughly in section \\ref\{sect:measurement\}. Based on this data the sites attempt to locate the antennas. This thesis is concerned with the algorithmic challenge facing these sites: how can we estimate the location of cellular network antennas based on crowdsourced data?\
\
OpenCellID \\cite\{opencellid\} is the worlds largest collaborative community project for collecting GPS locations of cellular network antennas. As of January 2015, their database contained almost 7 million unique antennas and 1.2 Billion crowdsourced measurements. The algorithm used by OpenCellID to compute cellular network antenna locations is very simple. Based on the measurements collected for an antenna, the longitude and latitude coordinates for the antenna is set to be the mean of those measurements' longitudes and latitudes. This is not a good approach since antennas broadcast their signals in the shape of a pizza slize, usually $120^\{\\circ\}$ horizontally. Omnidirectional antennas are very rare. This means most antennas in OpenCellID are estimated to be located approximately in the middle of the pizza slice shaped sector, when the correct location is somewhere so that every measurement lies to some direction of the antenna within $120^\{\\circ\}$. See figure \\ref\{figure:sector\}.\
\
\\begin\{figure\}[t]\
\\centering\
\\includegraphics[scale=0.6]\{pictures/sector_2.png\}\
\\caption\{A $120^\{\\circ\}$ horizontal broadcasting area of a cellular network antenna, also called a \\textit\{cell\} which we will define more thouroughly in section \\ref\{sect:cell\}. The black dots are measurements. The yellow dot is the estimated cellular network antenna location as estimated by OpenCellID.\}\
\\label\{figure:sector\}\
\\end\{figure\}\
\
Depending on the map scale, this error in antenna localization might not be that significant. We can still get a good idea of how many antennas are within a specific area, and approximately where they are located. But out on the street, in a more practical sense, it is more significant. 500 or even 1,000 meters might look like nothing on a map at a certain scale, but is a significant distance in reality. \
\
\
\\subsection\{Applications\}\
\\label\{sect:applications\}\
How can we benefit from knowing correct cellular network antenna locations? The most direct application is an alternative to the Global Positioning System (GPS) \\cite\{gps\}. GPS provides below 1 meter localization error for devices which receive signals from more than four GPS satellites, but requires special hardware technology which is both expensive and energy-consuming. Say we know the correct locations of every cellular network antenna and which mobile devices every antenna is broadcasting to. Then we can use this information to locate and track individual devices. This can be a cost-effective alternative to GPS. Especially in places where GPS is not available can localization by the cellular network be a valuable asset.\
\
For the individual user, knowledge about cellular network antenna locations can help find the best network provider in areas where the user resides. If the user is concerned with radiation from radiowaves, he can choose his areas of residence based on radio emission data collected by keeping track of where cellular network antennas are located.\
\
In a larger perspective, society can also benefit from cellular network antenna localization of mobile devices. By gathering data about antennas dozens of mobile devices are connected to, for example at certain times of the day or year, or when it is raining or the sun is shining, can help develop infrastructure or cultural visiting places. For example, such data can justify decisions regarding new roads along paths where many people travel, or the building of an amusement park at a place many people travel by in the summer when the sun is shining. \
\
\\section\{Research Questions\}\
\\label\{sect:researchQuestions\}\
With this thesis we want to briefly identify techniques and approaches that has been developed to localize cellular network antennas. We want to investigate if these techniques and approaches can be applied to the measurement data collected by OpenCellID, and thereby improve the accuracy of their estimated cellular network antenna locations. We want to develop our own algorithm for locating the antennas, and test it on generated theoretical test data and real data provided by OpenCellID.\
\
\\section\{Fundamental Terminology\}\
We now define some fundamental terminology. The problem this thesis addresses is based on the service provided by OpenCellID, so we use the same terminology as them. Other terminolgy will be explained throughout the thesis.\
\
\\subsection\{Cell\} \
\\label\{sect:cell\}\
\
\\begin\{figure\}[!h]\
\\centering\
\\includegraphics[scale=0.5]\{pictures/cellTowersThreeSectors.png\}\
\\caption\{Cells as a system of hexagons. \\cite\{frenkiel1979cellular\}\}\
\\label\{cell_network\}\
\\end\{figure\}\
\
A \\textit\{cell\} is a geographic area that is covered by a cellular network antenna \\cite[p.~548]\{computernetworking\}. The signal originating from this antenna can potentially reach every mobile device within the cell area. The antenna is placed on a \\textit\{cell tower\}, or more generally a \\textit\{base station\}. Throughout this thesis we will also use the term \\textit\{cell tower\} when referring to a cellular network antenna. To make it easy for the reader we will refer to the coverage area of a cell as the \\textit\{cell sector\}, the angle of the cell sector as the \\textit\{cell sector angle\}, and the edges of the cell sector as the \\textit\{cell edges\}. These components, along with measurements, makes a cell.\
\
The cell sector angle is with few exceptions always $120^\{\\circ\}$. Some cellular network providers also use cells where the cell sector angle is smaller, for example $60^\{\\circ\}$. This may be beneficial in for example urban areas. It is normal that three or more cells share a cell tower to cover everything in a $360^\{\\circ\}$ angle around the cell tower. The cell tower will then have several antennas pointing in different directions.\
\
To avoid disconnection and support high demand, the cells and cell towers are in theory organized as shown in figure \\ref\{cell_network\}. We can think of the cells as a system of hexagons where each hexagon contains at least three different cells. Each hexagon is then covered by at least three different cell towers. Depending on the strength of the cell tower or antenna, it may cover more than its own hexagon. This ensures efficient overlapping and constant connection to the cellular network for the users. In reality, it is difficult to maintain the hexagon system. Cell towers need to be placed at a certain hight, and buildings, mountains or other obstacles must be considered when attempting to cover a specific area. Urban areas may need more than one antenna to cover a small area where there are many obstacles, and rural areas may need fewer than in theory. Today, several cellular network providers exist in every country and each has their own cellular network and own interests.\
\
We will also consider a cell as an object in the OpenCellID database. The data fields of an OpenCellID Cell object contain information about the cell and will be defined in section \\ref\{sect:dataObjects\}.\
\
\
\\subsection\{Measurement\}\
\\label\{sect:measurement\}\
A \\textit\{measurement\} represents a smart phone's registration of data about the cell tower it is currently connected to. OpenCellID obtaines such measurements with the help of smart phone applications and crowdsourcing. In addition to data about the cell the measurement also includes the current coordinates of the phone, and some other information related to the phone's location. The data fields of an OpenCellID Measurement object will be defined in section \\ref\{sect:dataObjects\}. In this thesis we will say that measurements within the same cell belong to that cell.\
\
\\section\{Thesis Outline\}\
A brief description of the contents of the remaining chapters:\
\\paragraph\{Chapter \\ref\{chapt:RelatedWork\}: Related Work\} \
In this chapter we briefly examine the research that has been done when it comes to localizing mobile devices and cell towers. The two are related.\
\
\\paragraph\{Chapter \\ref\{chapt:background\}: Background for our Algorithm Development\}\
In this chapter we establish some background information for our algorithm development.\
\
\\paragraph\{Chapter \\ref\{chapt:D-CTL\}: Cell Tower Localization based on Distance (D-CTL)\}\
In this chapter we simplify our problem definition and develop the D-CTL algorithm. We then experiment with different parameters involved in the algorithm.\
\
\\paragraph\{Chapter \\ref\{chapt:RSS-CTL\}: Cell Tower Localization based on RSS (RSS-CTL)\}\
In this chapter we develop the RSS-CTL algorithm. We then experiment with different parameters involved in the algorithm.\
\
\\paragraph\{Chapter \\ref\{chapt:opencelliddata\}: Understanding the OpenCellID Data Set\}\
In this chapter we examine the data provided by OpenCellID. We define two datasets on which we will test D-CTL and RSS-CTL on.\
\
\\paragraph\{Chapter \\ref\{chap:results\}: Running the D-CTL and RSS-CTL Algorithms on OpenCellID Data\}\
In this chapter we test D-CTL and RSS-CTL on real data provided by OpenCellID, and experiment with different parameters involved in the algorithm. We will estimate cell tower locations with D-CTL and RSS-CTL for cells where the correct cell tower locations are known, to measure their accuracy. And we will estimate cell tower locations for the Bergen City Center, where the correct cell tower locations are not known.\
\
\\paragraph\{Chapter \\ref\{chapt:improvements\}: Analysis and Improvements\}\
In this chapter we analyze some cell tower locations estimated by D-CTL and RSS-CTL. We then suggest improvements to the algorithms and end the chapter with a conclusion for the thesis.\
\
\
\\newpage\
\\chapter\{Related Work\}\
\\label\{chapt:RelatedWork\}\
We can divide the discussion of localization within cellular networks into two topics. Localization of cell towers, and localization of mobile devices. In academics, the latter is larger and more established, but since our task concerns localization of cell towers we will only give a brief overview of this. The two topics are related because many techniques for locating mobile devices assume that the locations of cell towers are known.\
\
\\section\{Localization of Mobile Devices\}\
\\label\{sect:LocationMobileDevices\}\
Localization of mobile devices can be used for many interesting applications. The applications usually involve tracking the mobile device, and thereby the owner of the device. Existing approaches for positioning mobile devices fall into two categories: \\textit\{Range-Based\} positioning and \\textit\{Range-Free\} positioning. A more thorough overview can be found in \\cite\{localizationDevice1\}, \\cite\{localizationDevice2\}. A general overview of available localization schemes can be found in \\cite\{locSchemes\}.\
\
\\paragraph\{Range-Based Approaches\} This type of approaches assumes that the mobile devices are equipped with special hardware technology. The type of technology depends on the technique used to obtain the location of the device. Time of Arrival provides the concepts used in GPS \\cite\{gps\}. Two other techniques is called Time Difference of Arrival \\cite\{TDOA\} and Angle of Arrival \\cite\{AOA\}. In addition, Received Signal Strength (RSS) \\cite\{RSS\} can be utilized. Although range-based approaches can be very accurate, it requires expensive and energy-consuming technology.\
\
\\paragraph\{Range-Free Approaches\} This type of approaches are cost-effective alternatives to Range-Based approaches when there are hardware limitations and energy constraints to consider. The trade-off is accuracy and scalability of the localization estimates. This approach is largely based on connectivity measurements with a high density of seeds. The connectivity measurements from multiple sources are used to track the movement of the mobile device. Examples of techniques are Centroid \\cite\{Centroid\}, APIT \\cite\{APIT\}, MCL \\cite\{MCL\} and DV-hop \\cite\{DV-hop\}.\
\
\\section\{Localization of Cell Towers based on Data Collected with Wardriving\}\
\\label\{sect:LocationCellTowers\}\
When a technique for localizing mobile devices are dependent of cell towers and their locations, these are mostly assumed to be known. The amount of research done on localization of cell towers are significantly smaller than on localization of mobile devices. What we found are techniques based on data collected with \\textit\{wardriving\} \\cite\{wardriving\}. Wardriving involves collecting cellular network data with one mobile receiver while on the move, usualy driving. This way they generate structured trails of measurements and can detect where the mobile receiver finds or loses signals from cell towers. The data provided by OpenCellID are not structured like that. This data contains measurements with random locations within cell sectors. There is no way to know which other cell towers they are within range of and can connect to at the time and place of creation. We present two techniques on localization of cell towers based on wardriving data, given in two different papers.\
\
%and an interesting measure of distance between cell tower and mobile device given in a third paper.\
\
\\subsection\{Paper 1: Accuracy Characterization of Cell Tower Localization \\cite\{Yang\}\}\
\\label\{sect:paper1\}\
\
This paper presents the \\textit\{Bounding Technique\}. This is a three-step procedure to improve the existing localization algorithms Strongest RSS and Weighted Centroid. The results are based on measurement data obtained with wardriving.\
\
\\paragraph\{Strongest RSS\} \
This algorithm estimates a cell tower's location as the location of the measurement with the strongest observed RSS in the corresponding cell.\
\
\\paragraph\{Weighted Centroid\} \
This algorithm estimates a cell tower's location as the geometric center of the locations of the measurements belonging to the cell. That is, the mean of the longitudes and latitudes of the measurements. When calculating the geometric center, the coordinates of each measurement are weighted by the signal strength observed by that measurement.  \
\
\\paragraph\{Bounding Technique\} \
This technique does not target the algorithms, but the measurement data used to estimate a cell tower location with Strongest RSS or Weighted Centroid. The three steps are called RSS Thresholding, Boundary Filtering and Tower-based Regrouping.\
\
\\subparagraph\{RSS Thresholding\} \
In this step, all cells whose strongest RSS observed in a measurement that is lower than a certain threshold, is detected. These cells, with corresponding cell towers and measurements, are filtered out.\
\
\\subparagraph\{Boundary Filtering\} \
In this step it is assumed that cell towers far away have their strongest RSS observations in measurements at the boundaries of the wardriving area. These cells, with corresponding cell towers and measurements, are filtered out.\
\
The purpose of RSS Thresholding and Boundary Filtering is to detect the cell towers that can be accurately localized with the current wardriving data. Cell towers observed that are far away may be more accurately localized by gathering data closer to them. \
\
\\subparagraph\{Tower-based Regrouping\} \
In this step, measurements within cells that share a cell tower are combined, thus simulating a $360^\{\\circ\}$ or omnidirectional cell on which Weighted Centroid and Strongest RSS will perform better.\
\
\\subsection\{Paper 2: Base Station Localization in Search of Empty Spectrum Spaces in Cognitive Radio Networks \\cite\{localizationDevice1\}\}\
\\label\{sect:paper2\}\
\
This paper presents a two-step procedure to localize cell towers called \\textit\{Localization estimation based Gaussian Mixture Model\} (LGMM). The two steps are called Grid-LGMM and Expectation Maximization-LGMM (EM-LGMM).\
\
\\paragraph\{Grid-LGMM\} \
This is an algorithm that estimates the rough locations of the cell towers using a grid-search method and the maximum likelihood estimation. This is accomplished using the Bayesian Information Criterion (BIC). Grid-LGMM works as follows. For each iteration it adds a new cell tower, which it tries to fit to all possible grid points. The BIC value decides which grid point is best. Then all previously added cell towers are readjusted to see if the new cell tower would find better locations for the existing cell towers according to the BIC. The BIC value is updated after each step until it is maximized. This means no more readjustments of the cell towers are beneficial.\
\
\\paragraph\{EM-LGMM\} \
This step refines the grid locations by edging in to the true locations using the EM-method. This is divided into the E-step and M-step, both complex mathematical equations.\
\
%\\subsection\{An Analysis of Base Station Location Accuracy within Mobile-Cellular Networks \\cite\{RTT\}\}\
%\\label\{sect:paper3\}\
%This paper presents \\textit\{Round Trip Time\} (RTT). RTT is a measure of distance from the cell tower to a mobile device which is calculated from the time taken by a radio signal to travel from the cell tower to the mobile device and back.\
\
\
\\section\{Localizing Cell Towers based on Data Collected with Crowdsourcing\}\
\\label\{sect:applyingTechniques\}\
Our task is to estimate the location of cell towers based on measurement data collected with crowdsourcing. Since section \\ref\{sect:LocationMobileDevices\} concerns a different problem, these techniques or approaches are not of much use to us. The OpenCellID data do not have the neccassary properties for these ideas to be utilized. The exception is information about RSS, which we will utilize in chapter \\ref\{chapt:RSS-CTL\}.\
\
In section \\ref\{sect:LocationCellTowers\} we described two papers, each presenting a technique to localize cell towers. The drawback is that these techniques are based on wardriving data. Wardriving data has properties the data from OpenCellID do not have, as described in section \\ref\{sect:LocationCellTowers\}. This means we cannot apply these techniques directly, or in worst case, not at all.\
\
\\paragraph\{Strongest RSS\}\
This algorithm is simple, but inaccurate. Assuming that the measurement with the strongest observed RSS within a cell, also is the measurement closest to the cell tower, is risky. Especially when the OpenCellID measurements are collected from dozens of random mobile devices. RSS can potentially be affected by many factors. For example buildings, hills or other obstacles, other types of radio waves, or the signal receiver in the mobile device. We conclude that this algorithm is useless to us.\
\
\\paragraph\{Weighted Centroid\}\
Weighted Centroid is a simple and effective algorithm for estimating cell tower locations for omnidirectional cells. For cells with a $120^\{\\circ\}$ cell sector, it is not effective. Weighted Centroid will estimate the cell tower location to be the geometric center of the measurements belonging to the cell. For cells with a $120^\{\\circ\}$ cell sector, the correct location of the cell tower is not the geometric center of the measurements. See figure \\ref\{figure:sector\}. Thus, we cannot rely on this algorithm to estimate accurate cell tower locations based on OpenCellID measurements.\
\
\\paragraph\{Bounding Technique\}\
The purpose of the two first steps of the Bounding Technique, \\textit\{RSS Thresholding\} and \\textit\{Boundary Filtering\}, is to improve measurement data collected through wardriving. We immediately conclude that these two steps are useless to us. The third step, \\textit\{Tower-Based Regrouping\}, is more interesting. If the OpenCellID data provides information that lets ut combine cells that share a cell tower, we can simulate an omnidirectional cell and use Weighted Centroid to estimate the cell tower location.\
\
\\paragraph\{LGMM\}\
The LGMM algorithm is based on a structured distribution of measurements collected with wardriving within a small area. The measurements collected by OpenCellID are not structured in the same way, and most cells have their measurements spread out over much larger areas. Thus, we conclude that the LGMM algorithm is not applicable for estimating cell tower locations based on data provided by OpenCellID.\
\
\\chapter\{Background for our Algorithm Development\}\
\\label\{chapt:background\}\
\
Our task concerns the estimation of cell tower locations based on measurement data collected from crowdsourcing. In this chapter we start by exploring the notion of heuristics, and establish this as the basis for our algorithm development. We then define other preliminaries for our algorithm development: the generation of theoretical test data, a measure of accuracy for estimated cell tower locations called \\textit\{error\}, and how we will visualize the errors in charts. We end the chapter by briefly presenting our approach for estimating cell tower locations.\
\
\\section\{Heuristics\}\
\\label\{sect:heuristics\}\
With this algorithm we want to compute good estimates of cell tower locations. We want to start this chapter by exploring what such a good estimate is.\
\
Recall that a cell broadcasts it's signal in a $120^\{\\circ\}$ cell sector. Every measurement belonging to that cell must be located within the same cell sector. This is the most basic requirement for our development. So if we compute a cell sector with a corresponding cell tower location, so that every measurement fits within it, can we automatically say that this cell tower location is the correct location? No, we cannot. There may be several possible $120^\{\\circ\}$ cell sectors satisfying this requirement. We cannot know which one is correct, unless we ask the cellular network providers. This is why we cannot aim to compute the correct cell tower location. Instead, we will focus on developing an algorithm that will compute a cell tower location satisfying the requirements for the location of a cell tower. We turn to heuristics for this.\
\
A heuristic algorithm is an algorithm that aims to find an approximate or partial solution to a problem \\cite\{heuristics\}. When a problem occurs where the time or space complexity of the algorithm that finds the most optimal solution is unacceptable, we turn to heuristic algorithms. In reality, it is often sufficient to find an approximate or partial solution, and not the most optimal one due to cost or time constraints. In most cases, several heuristic solutions exist. That is why heuristic algorithms operate with a set of rules to evaluate each approximate or partial solution to decide which one is the best choice. Since we cannot aim to compute correct cell tower locations, we will develop a heuristic algorithm.\
\
In our case we must accept an approximate solution as we cannot know for sure which estimated cell tower location is more correct than the others. For a cell, we are looking for a location of the cell tower such that the cell tower successfully can broadcast it's signal to all the cell's measurements. Our algorithm need to satisfy the following rules:\
\\begin\{enumerate\}\
\\item Obviously, every measurement belonging to the cell must fit within the cell sector.\
\\item The distance from the cell tower to each measurement must be valid with respect to broadcasting technology.\
\\item The algorithm must be able to compute a good cell tower location given only a random subset of the measurements, given potential time constraints.\
\\end\{enumerate\}\
\
We choose to exclude one rule that might otherwise seem obvious: \\textit\{The algorithm must find a cell tower location such that the corresponing cell sector does not include measurements from other cells.\} To include this rule seems only natural if we assume that the cell tower a measurement belongs to, is the closest cell tower to that measurement. Can we make this assumption? First, we must take into consideration the direction of the cell. If the closest cell tower to a mobile device has it's cell sector pointing in the opposite direction, the mobile device would not be able to receive that cell's signal. Second, there are buildings, hills and other obstacles to consider that may block the closest cell tower's signal completely. Third, the cellular network contains cells from several different cellular network providers, even within small areas. If a mobile device subscribes to one specific cellular network provider, it would not be able to receive a signal from a cell belonging to a different cellular network provider, even if the cell was closer. We therefore conclude we cannot make the stated assumption, and cannot include this rule.\
\
\\section\{Generating Test Data\}\
\\label\{sect:testData\}\
As part of developing an algorithm for localizing cell towers, we will want to generate theoretical test data to test it on. When developing the algorithm we want to implement and test it every step of the way to make sure it behaves as desired and required. Generated theoretical test data will help us see how the algorithm performs. Since we are generating it ourselves we can decide it's characteristics to simulate different scenarios, and see how that affects the outcome the algorithm.\
\
The test data needs to represent cells and measurements. When we generate a cell and it's measurements we include the location of a cell tower. This is the most optimal location our algorithm can compute. Real data would not be able to provide the correct location of the cell tower, with some exceptions as explained in section \\ref\{sect:motivation\}. It is still important that we generate complete cells so we can compare estimated cell tower locations to correct cell tower locations.\
\
\\begin\{figure\}[h!]\
\\centering\
\\includegraphics[scale=1]\{pictures/cell_generated.png\}\
\\caption\{A generated cell. The black square represents the correct cell tower location. The angle of the first cell edge is $10^\{\\circ\}$ and the angle of the cell sector is $60^\{\\circ\}$. This means we generate the cell edges at $10^\{\\circ\}$ and $70^\{\\circ\}$, represented by the black lines. The maximum distance for measurements from the cell tower is 113, which means we also set the length of the cell edges to 113. 20 measurements are generated at random locations within the cell sector, with a maximum distance of 113 from the cell tower. Measurements are represented by black dots.\}\
\\label\{fig:cell_generated\}\
\\end\{figure\}\
\
We use a two-dimensional Cartesian coordinate system \\cite[page 11]\{calculus\} for infrastructure. Measurements and cell towers will then be given locations in the form of x and y coordinates. We use a two-dimensional Cartesian coordinate system to simulate the surface of the real world. To simulate it perfectly would require an environment that matches the earth's spherical shape, along with hills and buildings. We choose to use a Cartesian environment for simplicity.\
\
To satisfy rule number 2 presented in section \\ref\{sect:heuristics\}, we need to control how far away the measurements will be generated from the cell tower. In reality, cell towers have different range capabilities and cell phones have different reception capabilities. In addition to this, measurements collected for different cells can appear in a lot of different patterns. Sometimes the measurements are really close to the cell tower and sometimes they are really far away from the cell tower. This makes the theoretical maximum distance difficult to set. We will pick a distance that seems reasonable. When we know this maximum distance in addition to the correct cell tower coordinates, the angle of one of the cell edges and the cell sector angle, we can set the cell edges.\
\
If each measurement is to be generated with RSS, we assume the following: If the measurement is close to the cell tower the RSS is strong, and if it is far from the cell tower the RSS is weak. To make theoretical RSS as realistic as possible it is stored as a negative value. In reality, RSS values are negative Decibel-milliwatts (dBm) numbers. The RSS value for a measurement is calculated in the following way: After the location of the measurement has been randomly generated, the RSS value is equal to the distance from the measurement to the correct cell tower location, multiplied by -1.\
\
In section \\ref\{sect:deadzones\}, we will experiment with deadzones. Deadzones within cell sectors are generated as follows, after measurements has been generated: To create a deadzone we take a random point within a cell sector, and choose a radius from that point. Every measurement within the circle this point and radius forms, are removed.\
\
The actual generation of a cell happens as follows, see figure \\ref\{fig:cell_generated\}:\
\\begin\{enumerate\}\
\\item The correct cell tower location is set,\
\\item The maximum distance for measurements from the cell tower location is set,\
\\item Given the angle of one of the cell edges and the angle of the cell sector, the cell edges are set,\
\\item The measurements are generated with random locations within the cell sector and within a maximum distance from cell tower, and optionally with RSS,\
\\item If the cell is to have a deadzone, this is now generated.\
\\end\{enumerate\}\
\
\\section\{Error\}\
Throughout this thesis we will need a way to measure the accuracy of an estimated cell tower location when we know the correct cell tower location. We will measure this accuracy by calculating the distance from the estimated cell tower location to the correct cell tower location. We will call this distance the \\textit\{error\}. Say we have estimated the cell tower location of a cell. Then the error of the estimated cell tower location is the distance from the estimated cell tower location to the correct cell tower location. Say we have estimated the cell tower locations of several cells. Then the \\textit\{average error\} of the estimated cell tower locations is the average distance from the estimated cell tower locations to the correct cell tower locations. We can only use this measure of accuracy when the correct cell tower location is known.\
\
\\section\{Chart Notations\}\
We will use charts to visualize several average errors throughout this thesis. Each chart will have several graphs, so we need notations to tell them apart. Each graph is presented with the following information to the right of the chart:\
\\begin\{itemize\}\
\\item If a chart contains graphs resulting from estimated cell towers locations computed by more than one algorithm, the algorithm is specified.\
\\item Non-constant parameters.\
\\end\{itemize\}\
\
\\section\{Implementation Details\}\
Everything we implement is done using Java 7 \\cite\{java\} and Eclipse Integrated Development Environment \\cite\{eclipse\}. When running one of the algorithms or some other part of the code, we set initial heap size and maximum heap size to 512MB. We used a MacBook Air \\cite\{macAir\} with a 1.7 GHz Intel Core i7 Processor and 8 GB RAM.\
\
\\section\{Localizing Cell Towers Theoretically\}\
To estimate the location of a cell tower as effective as possible in real time, we need to develop a heuristic algorithm that works on a random subset of the measurements available. For some cells, not many measurements exist and we may have to use all of them. We assume the measurements of a cell is randomly distributed. To estimate the location of the cell tower we start by computing a line with two measurements as endpoints. This line will give us a good impression of which direction the cell is pointing. This is done with either the D-DL or RSS-DL sub-routine. After the computation of this line we propose two possible cell sector solutions, one for each endpoint. We use the FS sub-routine for this. We then choose one of the estimated cell sectors as the final estimated cell sector solution, and output the corresponding cell tower location, with the help of either D-CD or RSS-CD.\
\
We start by simplifying our problem definition by assuming that RSS is not available and cells broadcast in a cell sector of only $10^\{\\circ\}$.\
\
\\chapter\{Cell Tower Localization based on Distance (D-CTL)\}\
\\label\{chapt:D-CTL\}\
\
In this chapter we develop an algorithm for estimating the location of a cell tower, based on the distance between measurements belonging to the cell. We start by simplifying our original problem definition by making some assumptions. Then we present the sub-routines and complete algorithm for estimating a cell tower location based on distance between measurements. The algorithm and it's sub-routines are briefly summarized in table \\ref\{table:D-CTL\} and \\ref\{table:subRoutines_D-CTL\}. After this we will experiment with the different parameters involved in the algorithm. We end the chapter by concluding that utilizing distance between measurements will not estimate accurate cell tower locations for large cell sector angles.\
\
\\begin\{table\}[h!]\
  \\center\
  \\begin\{tabularx\}\{\\textwidth\}\{|p\{3.1cm\}|c|p\{7.8cm\}|c|\}\
    \\hline\
    \\cellcolor[gray]\{0.9\}Algorithm&\\cellcolor[gray]\{0.9\}Abbrev.&\\cellcolor[gray]\{0.9\}Description&\\cellcolor[gray]\{0.9\}Sect.\\\\\\hline\
    Cell Tower Localization based on Distance & D-CTL & Estimates the cell tower location of a cell by utilizing distance between measurements. Uses the following sub-routines: D-DL, CS, FS, D-CD. & \\ref\{sect:D-CTL\} \\\\\\hline\
   % Cell Tower Localization based on RSS & RSS-CTL & Estimates the cell tower location of a cell by utilizing difference in RSS among measurements. Uses the following sub-routines: RSS-DL, FS, RSS-CD. & \\ref\{sect:RSS-CTL\} \\\\\\hline\
  \\end\{tabularx\}\
  \\caption\{Cell Tower Localization based on Distance (D-CTL).\}\
  \\label\{table:D-CTL\}\
\\end\{table\}\
\
\\begin\{table\}[h!]\
  \\center\
  \\begin\{tabularx\}\{\\textwidth\}\{|p\{2.7cm\}|c|p\{8.2cm\}|c|\}\
    \\hline\
    \\cellcolor[gray]\{0.9\}Sub-routine&\\cellcolor[gray]\{0.9\}Abbrev.&\\cellcolor[gray]\{0.9\}Description&\\cellcolor[gray]\{0.9\}Sect.\\\\\\hline\
    Direction Line based on Distance & D-DL & Computes a line between the two measurements that are furthest apart from each other, chosen from $n^2$ randomly picked pairs of measurements. & \\ref\{sect:D-DL\} \\\\\\hline\
    Compute Sector & CS & Used within FS. Based on the line computed by D-DL, computes the actual cell sectors we try to fit the measurements within. & \\ref\{sect:FS\} \\\\\\hline\
    Find Sector & FS & Based on the line computed by D-DL, finds a cell sector every measurement fits within. & \\ref\{sect:FS\} \\\\\\hline\
    Cell Direction based on Distance & D-CD & Based on two estimated cell sectors computed by FS, guesses which one is the best choice based on distance. & \\ref\{sect:D-CD\} \\\\\\hline\
    %Direction Line based on RSS & RSS-DL & Computes a line between the two measurements whose difference in RSS values are the largest, chosen from $n^2$ randomly picked pairs of measurements. & \\ref\{sect:RSS-DL\} \\\\\\hline\
    %Cell Direction based on RSS & RSS-CD & Based on two estimated cell sectors computed by FS, guesses which one is the best choice based on RSS. & \\ref\{sect:RSS-CD\} \\\\\\hline\
  \\end\{tabularx\}\
  \\caption\{Sub-routines for the D-CTL algorithm.\}\
  \\label\{table:subRoutines_D-CTL\}\
\\end\{table\}\
\
\\section\{Small Angles\}\
\
Let us simplify our problem definition by assuming that cells broadcast in a narrow sector, say $10^\{\\circ\}$, and not $120^\{\\circ\}$. We also assume that RSS is not available and that the maximum distance for measurements from the cell tower is 113. In that case the following is a reasonable heuristic.\
\
\\paragraph\{Distance as Parameter\}\
We assume that RSS is not available, so we will utilize distance between the measurements of a cell to estimate the cell tower location.\
\
\\section\{Sub-Routine: Direction Line based on Distance (D-DL)\}\
\\label\{sect:D-DL\}\
\
\\begin\{figure\}[h!]\
\\centering\
\\begin\{subfigure\}[t]\{0.3\\textwidth\}\
    \\centering\
    \\includegraphics[scale=1]\{pictures/cell_10deg_20meas.png\}\
    \\caption\{The square represents the cell tower, the two lines represents the cell edges, and the dots represents the measurements.\}\
    \\label\{fig:cell_10deg_20meas\}\
  \\end\{subfigure\}\
  \\hspace\{.03\\textwidth\}\
  \\begin\{subfigure\}[t]\{0.3\\textwidth\}\
    \\centering\
    \\includegraphics[scale=1]\{pictures/cell_10deg_20meas_noCT_noEdges.png\}\
    \\caption\{Only the measurements are shown.\}\
    \\label\{fig:cell_10deg_20meas_distance_noCT_noEdges\}\
  \\end\{subfigure\}\
  \\hspace\{.03\\textwidth\}\
  \\begin\{subfigure\}[t]\{0.3\\textwidth\}\
    \\centering\
    \\includegraphics[scale=1]\{pictures/cell_10deg_20meas_distance.png\}\
    \\caption\{D-DL has computed $l_\{direction\}$ from the measurements, which is represented by the purple line.\}\
    \\label\{fig:cell_10deg_20meas_distance\}\
  \\end\{subfigure\}\
\\caption\{A generated cell with a $10^\{\\circ\}$ sector angle and 20 measurements.\}\
\\end\{figure\}\
\
Figure \\ref\{fig:cell_10deg_20meas\} displays a generated cell with a $10^\{\\circ\}$ cell sector and 20 randomly distributed measurements. The angles of the cell edges of this particular cell is $200^\{\\circ\}$ and $210^\{\\circ\}$. This means the angle of each measurement from the cell tower is between $200^\{\\circ\}$ and $210^\{\\circ\}$. We now assume we do not know the location of the cell tower or the angles of the cell edges, as displayed in figure \\ref\{fig:cell_10deg_20meas_distance_noCT_noEdges\}. We ask the following question: To witch direction of the measurements is the cell tower located, when we only know the location of the measurements? We can easily guess the answer by looking at the figure, but we need to come up with an answer algorithmically.\
\
We present the first sub-routine of the D-CTL algorithm: \\textit\{Direction Line based on Distance\} (D-DL). The purpose of D-DL is to estimate the direction from the measurements the cell tower is located. It does that by iterating over $n^2$ pairs of measurements and finds the pair with the largest distance between them. D-DL then forms a line $l_\{direction\}$ with the two measurements as endpoints. See figure \\ref\{fig:cell_10deg_20meas_distance\}.\
\
D-DL takes as input $M$ and $n$, where $M$ is the set of measurements for a cell. First, it declares the variables $ep_1$, $ep_2$ and $d_\{difference\}=0$ for storing the two measurements with the current largest distance between them, and that distance. For each of the following $n$ iterations it randomly picks a measurement from $M$, compares the distance between it to $n$ other randomly picked measurements from $M$, and stores the largest distance and the pair of measurements representing it in $ep_1$, $ep_2$ and $d_\{difference\}$. The algorithm outputs the line $l_\{direction\}$ with $ep_1$ and $ep_2$ as endpoints. See algorithm \\ref\{alg:D-DL\}.\
\
\\begin\{algorithm\}[h!]\
  \\center\
  \\begin\{tabular\}\{|l|\}\
    \\hline\
    \\textbf\{Algorithm 1:\} Direction Line based on Distance (D-DL)\\\\\
    \\hline \\hline\
    \\begin\{minipage\}\{1.0\\linewidth\}\
      \\begin\{tabbing\}\
        \\=\\textbf\{output:\} \\=\\kill\
        \\>\\textbf\{input:\}\\>$M$ and $n$ \\\\ \
        \\>\\textbf\{output:\}\\>$l_\{direction\}$\
      \\end\{tabbing\}\
    \\end\{minipage\}\\\\\\hline \\hline\
    \\begin\{minipage\}\{1.0\\linewidth\}\
      \\vspace\{2pt\}\
      \\begin\{tabbing\}\
      Declare variables $ep_1$,$ep_2$ and $d_\{difference\}=0$\\\\\
      \\textbf\{for\} $0$ to $n$\\\\\
      %\\=\\textbf\{output:\} \\=\\kill\
      \\hspace\{10pt\}randomly pick a measurement $a \\in M$\\\\ \
      \\hspace\{10pt\}\\textbf\{for\} $0$ to $n$\\\\\
      \\hspace\{20pt\}randomly pick a measurement $b \\in M$ such that $a \\neq b$\\\\ \
      \\hspace\{20pt\}\\textbf\{if\} the distance between $a$ and $b$ is larger than the distance currently\\\\\
      \\hspace\{32pt\}stored in $d_\{difference\}$,\\\\\
      \\hspace\{32pt\}store $a$ in $ep_1$, $b$ in $ep_2$, and the distance between them in $d_\{difference\}$\\\\\
      \\textbf\{return\} $l_\{direction\}$ with $ep_1$ and $ep_2$ as endpoints\
      \\end\{tabbing\}\
    \\end\{minipage\}\\\\\
    \\hline\
  \\end\{tabular\}\
\\caption\{Direction Line based on Distance (D-DL).\}\
\\label\{alg:D-DL\}\
\\end\{algorithm\}\
\
\\subsubsection\{Notations Intruduced in This Section:\}\
\\begin\{description\}\
\\item[$M$:] The complete set of measurements for a cell.\
\\item[$n$:] D-DL compares the distance between $n^2$ pairs of measurements.\
\\item[$ep_1$, $ep_2$:] In D-DL, this is where the two measurements with the largest distance between them, are stored. \
\\item[$d_\{difference\}$:] In D-DL, this is where the largest distance between two measurements is stored.\
\\item[$l_\{direction\}$:] The line that represents the estimated direction of the cell.\
\\end\{description\}\
\
\\section\{Sub-Routines: Compute Sector (CS) and Find Sector (FS)\}\
\\label\{sect:FS\}\
\
\\begin\{figure\}[h!]\
\\centering\
\\begin\{subfigure\}[t]\{0.45\\textwidth\}\
    \\centering\
    \\includegraphics[scale=1]\{pictures/cell_10deg_20meas_distance_sectors.png\}\
    \\caption\{The purple line represents $l_\{direction\}$. The blue and pink squares and lines represent the two estimated cell sectors and cell towers solutions.\}\
    \\label\{fig:cell_10deg_20meas_distance_sectors\}\
  \\end\{subfigure\}\
  \\hspace\{.03\\textwidth\}\
  \\begin\{subfigure\}[t]\{0.45\\textwidth\}\
    \\centering\
    \\includegraphics[scale=1]\{pictures/cell_10deg_20meas_distance_sectors_measurements.png\}\
    \\caption\{The black dots represent the measurements. The blue and pink squares and lines represent the estimated cell sectors and cell towers solutions.\}\
    \\label\{fig:cell_10deg_20meas_distance_sectors_measurements\}\
  \\end\{subfigure\}\
\\caption\{A generated cell with a $10^\{\\circ\}$ sector angle and 20 measurements.\}\
\\end\{figure\}\
\
We now assume we have used D-DL to compute $l_\{direction\}$ with $ep_1$ and $ep_2$ as it's endpoints, and that we can extend $l_\{direction\}$ to either side. $l_\{direction\}$ provides information as to which direction from the measurements we estimate the cell tower to be located. Since we have no more information about the measurements than their locations, we cannot know if the correct cell tower is located by $ep_1$ or $ep_2$. We therefore compute estimated cell sectors with cell tower locations for both endpoints. See figure \\ref\{fig:cell_10deg_20meas_distance_sectors\}. The FS sub-routine is run twice, once for each endpoint. We will describe the sub-routine by assuming the correct cell tower is located by $ep_1$.\
\
We present the second and third sub-routine of the D-CTL algorithm: \\textit\{Compute Sector\} (CS) and \\textit\{Find Sector\} (FS). The purpose of CS and FS is to compute a cell sector $C_\{heuristic\}$ by one of the endpoints of $l_\{direction\}$, so that each measurement $m \\in M$ fits within it. See rule number 1 presented in section \\ref\{sect:heuristics\}. FS computes $C_\{heuristic\}$ by doing several iterations. For each iteration, if each $m$ does not fit within the currently computed cell sector, FS makes a new call to CS with an extended version of $l_\{direction\}$, which computes a new cell sector.\
\
CS takes as input $l_\{direction\}$ and $\\alpha$, where $\\alpha$ is the cell sector angle. It starts by rotating $l_\{direction\}$ around $ep_1$ in both directions, by and angle of $\\frac\{\\alpha\}\{2\}$. Then, it returns $C_\{heuristic\}$ with $ep_1$ as the cell tower location, and the two lines obtained from rotating $l_\{direction\}$ as cell edges.\
\
\\begin\{algorithm\}[h!]\
  \\center\
  \\begin\{tabular\}\{|l|\}\
    \\hline\
    \\textbf\{Algorithm 2:\} Compute Sector (CS)\\\\\
    \\hline \\hline\
    \\begin\{minipage\}\{1.0\\linewidth\}\
      \\begin\{tabbing\}\
        \\=\\textbf\{output:\} \\=\\kill\
        \\>\\textbf\{input:\}\\>$l_\{direction\}$, $\\alpha$\\\\ \
        \\>\\textbf\{output:\}\\>$C_\{heuristic\}$\
      \\end\{tabbing\}\
    \\end\{minipage\}\\\\\\hline \\hline\
    \\begin\{minipage\}\{1.0\\linewidth\}\
      \\vspace\{2pt\}\
      \\begin\{tabbing\}\
      rotate $l_\{direction\}$ around $ep_1$ in both directions, by an angle of $\\frac\{\\alpha\}\{2\}$\\\\\
      \\textbf\{return\} $C_\{heuristic\}$ with $ep_1$ as cell tower location and the two\\\\ \
      \\hspace\{35pt\}lines obtained from the rotations as cell edges\
      \\end\{tabbing\}\
    \\end\{minipage\}\\\\\
    \\hline\
  \\end\{tabular\}\
  \\caption\{Compute Sector (CS).\}\
  \\label\{alg:CS\}\
\\end\{algorithm\}\
\
FS takes as input $M$, $l_\{direction\}$, $d_\{extend\}$, and $\\alpha$, where $d_\{extend\}$ is a constant. It starts by declaring the variable $C_\{heuristic\}$. Then it makes a call to CS to compute the initial estimated cell sector with the original $ep_1$ as the cell tower location, and stores it in $C_\{heuristic\}$. Then it does several iterations. For each iteration, if each $m$ does not fit within $C_\{heuristic\}$ it extends $l_\{direction\}$ by $ep_1$ by a constant length $d_\{extend\}$. We ask the reader to think about it as moving $ep_1$ a constant length, away from $ep_2$, along an extended $l_\{direction\}$. Then a new call is made to CS with the new $l_\{direction\}$ as input. The iterations stop when each $m$ fits within $C_\{heuristic\}$.\
\
\\begin\{algorithm\}[h!]\
  \\center\
  \\begin\{tabular\}\{|l|\}\
    \\hline\
    \\textbf\{Algorithm 3:\} Find Sector (FS)\\\\\
    \\hline \\hline\
    \\begin\{minipage\}\{1.0\\linewidth\}\
      \\begin\{tabbing\}\
        \\=\\textbf\{output:\} \\=\\kill\
        \\>\\textbf\{input:\}\\>$M$, $l_\{direction\}$, $d_\{extend\}$, $\\alpha$\\\\ \
        \\>\\textbf\{output:\}\\>$C_\{heuristic\}$\
      \\end\{tabbing\}\
    \\end\{minipage\}\\\\\\hline \\hline\
    \\begin\{minipage\}\{1.0\\linewidth\}\
      \\vspace\{2pt\}\
      \\begin\{tabbing\}\
      declare variable $C_\{heuristic\}$\\\\\
      run CS with $l_\{direction\}$ and $\\alpha$ as input, and store output in $C_\{heuristic\}$\\\\\
      \\textbf\{while\} every measurement $m$ $\\in$ $M$ does not fit within $C_\{heuristic\}$,\\\\\
      %\\=\\textbf\{output:\} \\=\\kill\
      \\hspace\{10pt\}extend $l_\{direction\}$ by $ep_1$ by constant length $d_\{extend\}$, and\\\\\
      \\hspace\{10pt\}run CS with $l_\{direction\}$ and $\\alpha$ as input, and store output in $C_\{heuristic\}$\\\\\
      \\textbf\{return\} $C_\{heuristic\}$\
      \\end\{tabbing\}\
    \\end\{minipage\}\\\\\
    \\hline\
  \\end\{tabular\}\
  \\caption\{Find Sector (FS).\}\
  \\label\{alg:FS\}\
\\end\{algorithm\}\
\
As stated above, we apply FS on both endpoints of $l_\{direction\}$, thereby computing two estimated cell sector solutions. See figure \\ref\{fig:cell_10deg_20meas_distance_sectors_measurements\}.\
\
\\subsubsection\{Notations Intruduced in This Section:\}\
\\begin\{description\}\
\\item[$C_\{heuristic\}$:] An estimated cell sector.\
\\item[$m$:] A measurement $\\in M$.\
\\item[$\\alpha$:] The cell sector angle.\
\\item[$d_\{extend\}$:] FS extends $l_\{direction\}$ by the value of $d_\{extend\}$ for each iteration.\
\\end\{description\}\
\
\\section\{Sub-Routine: Choose Direction based on Distance (D-CD)\}\
\\label\{sect:D-CD\}\
\
\\begin\{figure\}[h!]\
\\centering\
\\begin\{subfigure\}[t]\{0.45\\textwidth\}\
    \\centering\
    \\includegraphics[scale=1]\{pictures/cell_10deg_20meas_distance_everything.png\}\
    \\caption\{The black square and lines represent the correct cell tower and cell sector. The black dots represent the measurements. The purple line represents $l_\{direction\}$. The blue and pink squares and lines represent the two estimated cell sectors and cell towers solutions.\}\
    \\label\{fig:cell_10deg_20meas_distance_everything\}\
  \\end\{subfigure\}\
  \\hspace\{.03\\textwidth\}\
  \\begin\{subfigure\}[t]\{0.45\\textwidth\}\
    \\centering\
    \\includegraphics[scale=1]\{pictures/cell_10deg_20meas_distance_chosenCell.png\}\
    \\caption\{The black dots represent the measurements. The pink square and lines represent the chosen estimated cell sector and cell tower solution.\}\
    \\label\{fig:cell_10deg_20meas_distance_chosenCell\}\
  \\end\{subfigure\}\
\\caption\{A generated cell with a $10^\{\\circ\}$ sector angle and 20 measurements.\}\
\\end\{figure\}\
\
We now assume we have used D-DL to compute $l_\{direction\}$ with $ep_1$ and $ep_2$ as it's endpoints, and used FS to compute two estimated cell sector solutions $C_\{heuristic1\}$ and $C_\{heuristic2\}$. Now we want to choose one of them as the final estimated solution for cell sector with corresponding cell tower location. We propose the following hypothesis:\
\
\\bigskip\
\\begin\{minipage\}\{5.4in\}\
\\textbf\{Hypothesis 1\}\\hspace\{11pt\}In a cell sector, the further away from the cell tower we get, the distance between the two lines forming the cell edges $l_1$ and $l_2$, increases. See figure \\ref\{fig:leastPossibleDistance\}. A perfect line $l$ to give an impression of which direction the cell is pointing would intersect the cell tower and go between $l_1$ and $l_2$ such that the distance from $l$ to $l_1$ and the distance from $l$ to $l_2$ always are equal. This means that measurements further away from the cell tower may be further away from $l$, than those close to it. Now consider the two endpoints of $l$, $lep_1$ and $lep_2$, and our randomly distributed measurements. Let $S_1$ be the subset of measurements closer to $lep_1$ than $lep_2$, and $S_2$ be the subset of measurements closer to $lep_2$ than $lep_1$. We calculate the mean $mean_1$ of the least possible distances from the measurements in $S_1$ to $l$, and the mean $mean_2$ of the least possible distances from the measurements in $S_2$ to $l$. We claim that if $mean_1 < mean_2$, then $lep_1$ is the endpoint of $l$ at the correct cell tower location. If $mean_2 < mean_1$, then $lep_2$ is the endpoint of $l$ at the correct cell tower location. We claim the hypothesis works for every $\\alpha >= 10$ and $\\alpha <= 120$.\
\\end\{minipage\}\
\\bigskip\
\
\\begin\{figure\}[h!]\
\\centering\
\\includegraphics[scale=0.6]\{pictures/leastPossibleDistance.png\}\
\\caption\{The mean of the least possible distances from the measurements in $S_1$ to $l$ are very likely to be smaller than the mean of the least possible distances from the measurements in $S_2$ to $l$.\}\
\\label\{fig:leastPossibleDistance\}\
\\end\{figure\}\
\
We apply this hypothesis to cells we are generating. We are not equipped with such a perfect direction line $l$, so we use $l_\{direction\}$ with endpoints $ep_1$ and $ep_2$, instead. This means we will calculate the mean of the least possible distances from the measurements closer to $ep_1$ than $ep_2$, and the mean of the least possible distances from the measurements closer to $ep_2$ than $ep_1$. It is very likely that $l_\{direction\}$ will not intersect the correct cell tower location, but one of the endpoints will be close to it. We assume the $l_\{direction\}$ that is passed on to this sub-routine is the one computed by D-DL. The extension part in FS was only performed internally in that sub-routine.\
\
We present the fourth sub-routine of the D-CTL algorithm: \\textit\{Choose Direction based on Distance\} (D-CD). The purpose of D-CD is to determine if $C_\{heuristic1\}$ or $C_\{heuristic2\}$ is the better choice for a final estimated cell sector solution. It does this by applying hypothesis 1 on the measurements and $l_\{direction\}$. The endpoint of $l_\{direction\}$ corresponding to the lesser of the calculated means is the endpoint presumed to be closest to the correct cell tower location. It compares the distance from this endpoint to the cell tower locations of $C_\{heuristic1\}$ and $C_\{heuristic2\}$. See figure \\ref\{fig:cell_10deg_20meas_distance_everything\}. Whichever cell tower location is closest will be chosen as the best estimated cell tower location. See figure \\ref\{fig:cell_10deg_20meas_distance_chosenCell\}.\
\
D-CD takes as input $M$, $n$, $l_\{direction\}$ with endpoints $ep_1$ and $ep_2$, $C_\{heuristic1\}$ and $C_\{heuristic2\}$. It starts by selecting $n$ random measurements $S \\in M$. It then divides $S$ into two subsets; the measurements that are closer to $ep_1$ than $ep_2$, and the measurements that are closer to $ep_2$ than $ep_1$. D-CD then calculates the means of the least possible distances from the measurements in the two subsets of $S$, to $l_\{direction\}$. For the subset of $S$ with the lesser mean, D-CD chooses the one of $C_\{heuristic1\}$ or $C_\{heuristic2\}$ whose cell towers location is closest to the corresponding endpoint of $l_\{direction\}$. See algorithm \\ref\{alg:D-CD\}.\
\
\\begin\{algorithm\}[h!]\
  \\center\
  \\begin\{tabular\}\{|l|\}\
    \\hline\
    \\textbf\{Algorithm 4:\} Cell Direction based on Distance (D-CD)\\\\\
    \\hline \\hline\
    \\begin\{minipage\}\{1.0\\linewidth\}\
      \\begin\{tabbing\}\
        \\=\\textbf\{output:\} \\=\\kill\
        \\>\\textbf\{input:\}\\>$M$, $n$, $l_\{direction\}$, $C_\{heuristic1\}$, $C_\{heuristic2\}$\\\\ \
        \\>\\textbf\{output:\}\\>$C_\{heuristic1\}$ or $C_\{heuristic2\}$\
      \\end\{tabbing\}\
    \\end\{minipage\}\\\\\\hline \\hline\
    \\begin\{minipage\}\{1.0\\linewidth\}\
      \\vspace\{2pt\}\
      \\begin\{tabbing\}\
      pick $n$ random measurements $S \\in M$\\\\\
      let the measurements $\\in S$ closer to $ep_1$ than $ep_2$ be $S_1$, and the\\\\\
      \\hspace\{12pt\}measurements $\\in S$ closer to $ep_2$ than $ep_1$ be $S_2$\\\\\
      calculate the mean $mean_1$ of the least possible distances from the\\\\\
      \\hspace\{12pt\}measurements in $S_1$ to $l_\{direction\}$\\\\\
      calculate the mean $mean_2$ of the least possible distances from the\\\\\
      \\hspace\{12pt\}measurements in $S_2$ to $l_\{direction\}$\\\\\
      \\textbf\{if\} $mean_1 < mean_2$,\\\\\
      \\hspace\{12pt\}\\textbf\{return\} $C_\{heuristic1\}$ if it's cell tower location is closer to $ep_1$ than the cell\\\\\
      \\hspace\{24pt\}tower location of $C_\{heuristic2\}$, or \\textbf\{return\} $C_\{heuristic2\}$ if it's cell tower\\\\\
      \\hspace\{24pt\}location is closer to $ep_1$ than the cell tower location of $C_\{heuristic1\}$\\\\\
      \\textbf\{if\} $mean_2 < mean_1$,\\\\\
      \\hspace\{12pt\}\\textbf\{return\} $C_\{heuristic1\}$ if it's cell tower location is closer to $ep_2$ than the cell\\\\\
      \\hspace\{24pt\}tower location of $C_\{heuristic2\}$, or \\textbf\{return\} $C_\{heuristic2\}$ if it's cell tower\\\\\
      \\hspace\{24pt\}location is closer to $ep_2$ than the cell tower location of $C_\{heuristic1\}$\
      \\end\{tabbing\}\
    \\end\{minipage\}\\\\\
    \\hline\
  \\end\{tabular\}\
  \\caption\{Cell Direction based on Distance (D-CD).\}\
  \\label\{alg:D-CD\}\
\\end\{algorithm\}\
\
\\subsubsection\{Notations Intruduced in This Section:\}\
\\begin\{description\}\
\\item[$n$:] In this section, $n$ was used differently than in section \\ref\{sect:D-DL\}. Here, $n$ is the number of randomly chosen measurements $S \\in M$\
\\item[$C_\{heuristic1\}$, $C_\{heuristic2\}$:] The two estimated cell sectors computed by FS.\
\\item[$l_1$, $l_2$:] The two cell edges of the cell in figure \\ref\{fig:leastPossibleDistance\}.\
\\item[$l$:] The line that intersects the correct cell tower location in figure \\ref\{fig:leastPossibleDistance\} and goes exactly in between $l_1$ and $l_2$.\
\\item[$lep_1$, $lep_2$:] The two endpoints of $l$.\
\\item[$S$:] The set of $n$ randomly chosen measurements $\\in M$.\
\\item[$S_1$, $S_2$:] The two subsets of measurements where each are closer to one endpoint of $l$ or $l_\{direction\}$, than the other.\
\\item[$mean_1$, $mean_2$:] The means of the least possible distances from the measurements in $S_1$ and $S_2$, to $l$ or $l_\{direction\}$.\
\\end\{description\}\
\
\\section\{Algorithm: Cell Tower Localization based on Distance (D-CTL)\}\
\\label\{sect:D-CTL\}\
We will now combine the algorithms defined in section \\ref\{sect:D-DL\}, \\ref\{sect:FS\} and \\ref\{sect:D-CD\} into one complete algorithm for localizing cell towers based on distance: The \\textit\{Cell Tower Localization based on Distance\} (D-CTL) algorithm. See algorithm \\ref\{alg:D-CTL\}.\
\
\\begin\{algorithm\}[h!]\
  \\center\
  \\begin\{tabular\}\{|l|\}\
    \\hline\
    \\textbf\{Algorithm 5:\} Cell Tower Localization based on Distance (D-CTL)\\\\\
    \\hline \\hline\
    \\begin\{minipage\}\{1.0\\linewidth\}\
      \\begin\{tabbing\}\
        \\=\\textbf\{output:\} \\=\\kill\
        \\>\\textbf\{input:\}\\>$M$, $n$, $d_\{extend\}$, $\\alpha$\\\\ \
        \\>\\textbf\{output:\}\\>An estimated cell tower location\
      \\end\{tabbing\}\
    \\end\{minipage\}\\\\\\hline \\hline\
    \\begin\{minipage\}\{1.0\\linewidth\}\
      \\vspace\{2pt\}\
      \\begin\{tabbing\}\
      declare varible $l_\{direction\}$\\\\\
      run D-DL with $M$ and $n$ as input and store the output in $l_\{direction\}$\\\\ \
      declare variables $C_\{heuristic1\}$ and $C_\{heuristic2\}$\\\\\
      run FS with $M$, $l_\{direction\}$, $d_\{extend\}$ and $\\alpha$ as input, compute estimated cell\\\\\
      \\hspace\{12pt\}sector solution for endpoint $ep_1$ of $l_\{direction\}$, and store the output in\\\\\
      \\hspace\{12pt\}$C_\{heuristic1\}$\\\\\
      run FS with $M$, $l_\{direction\}$, $d_\{extend\}$ and $\\alpha$ as input, compute estimated cell\\\\\
      \\hspace\{12pt\}sector solution for endpoint $ep_2$ of $l_\{direction\}$, and store the output in\\\\\
      \\hspace\{12pt\}$C_\{heuristic2\}$\\\\\
      declare variable $C_\{heuristic\}$\\\\\
      run D-CD with $M$, $n$, $l_\{direction\}$, $C_\{heuristic1\}$ and $C_\{heuristic2\}$ as input and\\\\\
      \\hspace\{12pt\}store the output in $C_\{heuristic\}$\\\\\
      \\textbf\{return\} the cell tower location of $C_\{heuristic\}$\
      \\end\{tabbing\}\
    \\end\{minipage\}\\\\\
    \\hline\
  \\end\{tabular\}\
  \\caption\{Cell Tower Localization based on Distance (D-CTL).\}\
  \\label\{alg:D-CTL\}\
\\end\{algorithm\}\
\
\\section\{Scaling $d_\{extend\}$\}\
\\label\{sect:scalingD_10deg\}\
The Find Sector sub-routine performs several iterations. For each iteration it attempts to fit every measurement within a computed cell sector which is based on $l_\{direction\}$. If at least one measurement does not fit, FS extends $l_\{direction\}$ by the value of $d_\{extend\}$. See section \\ref\{sect:FS\}. In this section we want to investigate if different values of $d_\{extend\}$ affect the accuracy of estimated cell tower locations. This knowledge is important in order to improve accuracy of cell tower localization and if time constraints are present. See rule number 3 presented in section \\ref\{sect:heuristics\}. If $d_\{extend\}$ is too large, FS extends $l_\{direction\}$ too far, and the estimated cell tower location might be further away than neccessary. If $d_\{extend\}$ is too small, FS does more iterations than neccessary, thus increasing the running time of the algorithm needlessly. We test and compare D-CTL with different values of $d_\{extend\}$. The average error values are displayed in the chart in figure \\ref\{fig:scalingDTheoretically\}.  We use the following values of $d_\{extend\}$:\
\\begin\{itemize\}\
\\item $d_\{extend\}=2$\
\\item $d_\{extend\}=4$\
\\item $d_\{extend\}=8$\
\\item $d_\{extend\}=16$\
\\item $d_\{extend\}=32$\
\\item $d_\{extend\}=64$\
\\end\{itemize\}\
\
We use the following constant parameters:\
\\begin\{itemize\}\
\\item $\\alpha = 10^\{\\circ\}$\
\\item $r_\{include\}$ (maximum distance for each measurement from the cell tower, will be defined in the next section) $= 113$\
\\end\{itemize\}\
\
\\begin\{figure\}[h!]\
\\centering\
\\includegraphics[scale=0.6]\{pictures/scalingDTheoretically.png\}\
\\caption\{The chart displays how the average error increases when $d_\{extend\}$ is increasing. See section \\ref\{sect:FS\} for the definition of $d_\{extend\}$. Each average error sample is based on the errors of 1000 generated cells. See section \\ref\{sect:D-DL\} for the definition of $M$. See section \\ref\{sect:D-DL\} and \\ref\{sect:D-CD\} for the definition of $n$. For example, the red line displays average error values for different values of $d_\{extend\}$ when cells are generated with $M=20$ and D-CTL is run with $n=20$.\}\
\\label\{fig:scalingDTheoretically\}\
\\end\{figure\}\
\
We clearly see from the chart in figure \\ref\{fig:scalingDTheoretically\} that the average error increases when $d_\{extend\}$ is increasing. From these average error values we conclude that using $d_\{extend\}=2$ or $d_\{extend\}=4$ is the best choice when we want to compute as accurate cell tower locations as possible. To decide which one to use further we measure the worst case running time. The assumtion is that D-CTL will run for a longer time with $d_\{extend\}=2$ than $d_\{extend\}=4$. The worst case running time will occur when we generate cells with $M=100$, and run the D-CTL algorithm with $n=80$ and $d_\{extend\}=2$. $\\alpha$ and $r_\{include\}$ are still constants. See the blue graph in figure \\ref\{fig:scalingDTheoretically\}. The average running time with these parameters was \\textbf\{0.51ms\}. Because this running time is so small, we conclude that we can use $d_\{extend\}=2$ for further computations of estimated cell tower locations.\
\
\\section\{Scaling Maximum Distance from Cell Tower\}\
\\label\{sect:scalingR_10deg\}\
In the real world, the measurements within a cell can be either very close to the cell tower, or very far away. In this section we want to investigate if different values of a cell tower's maximum range affect the accuracy of the estimated cell tower locations. We do this by scaling the maximum distance that a measurement can by located from the cell tower. We ask the reader to think about this as a radius from the cell tower. Every measurement within this radius will be included in the computations. Will call this radius $r_\{include\}$. We test and compare D-CTL with different values of $r_\{include\}$. The average error values are displayed in the chart in figure \\ref\{fig:scalingRTheoretically\}. We use the following values of $r_\{include\}$:\
\\begin\{itemize\}\
\\item $r_\{include\}=30$\
\\item $r_\{include\}=70$\
\\item $r_\{include\}=113$\
\\item $r_\{include\}=160$\
\\item $r_\{include\}=200$\
\\end\{itemize\}\
\
We use the following constant parameters:\
\\begin\{itemize\}\
\\item $\\alpha = 10^\{\\circ\}$\
\\item $d_\{extend\}=2$\
\\end\{itemize\}\
\
\\begin\{figure\}[h!]\
\\centering\
\\includegraphics[scale=0.6]\{pictures/scalingRTheoretically.png\}\
\\caption\{The chart displays how the average error increases when $r_\{include\}$ is increasing. Each average error sample is based on the errors of 1000 generated cells. See section \\ref\{sect:D-DL\} for the definition of $M$. See section \\ref\{sect:D-DL\} and \\ref\{sect:D-CD\} for the definition of $n$. For example, the red line displays average error values for different values of $r_\{include\}$ when cells are generated with $M=20$ and D-CTL is run with $n=10$.\}\
\\label\{fig:scalingRTheoretically\}\
\\end\{figure\}\
\
We clearly see from the chart in figure \\ref\{fig:scalingRTheoretically\} that the average error increases when $r_\{include\}$ is increasing. The reason for this is simple. When $r_\{include\}$ increases, the cell sector grows; the distance between the cell edges increases when $r_\{include\}$ is increasing. This means the randomly distributed measurements have a larger area to spread out on. This means the FS algorithm potentially needs to extend $l_\{direction\}$ further to be able to fit them all within a cell sector.\
\
\\subsubsection\{Notations Intruduced in This Section:\}\
\\begin\{description\}\
\\item[$r_\{include\}$:] Every measurement of a cell that is within the value of $r_\{include\}$ from the correct cell tower location is included when using D-CTL to estimate the cell tower location.\
\\end\{description\}\
\
\\section\{Increasing Cell Sector Angle\}\
\\label\{sect:greaterAngles\}\
Up until now we have utilized the distance between the measurements of a cell to estimate the cell tower location, and we have only focused on cells with a cell sector angle $\\alpha = 10^\{\\circ\}$. This has only been a simplification of our original problem. The original problem definition involves estimating cell tower locations when $\\alpha = 120^\{\\circ\}$. We ask the following question: How will larger values of $\\alpha$ affect the accuracy of estimated cell tower locations computed with D-CTL? We test and compare D-CTL with different values of $\\alpha$. The average error values are displayed in two different charts in figure \\ref\{fig:scalingAlphaTheoretically_113\} and \\ref\{fig:scalingAlphaTheoretically_200\}. The difference between the charts is the value of $r_\{include\}$. The chart in figure \\ref\{fig:scalingAlphaTheoretically_113\} has $r_\{include\} = 113$. The chart in figure \\ref\{fig:scalingAlphaTheoretically_200\} has $r_\{include\} = 200$. We use the following values of $\\alpha$:\
\\begin\{itemize\}\
\\item $\\alpha=10^\{\\circ\}$\
\\item $\\alpha=45^\{\\circ\}$\
\\item $\\alpha=90^\{\\circ\}$\
\\item $\\alpha=120^\{\\circ\}$\
\\end\{itemize\}\
\
We use the following constant parameters for the chart in figure \\ref\{fig:scalingAlphaTheoretically_113\}:\
\\begin\{itemize\}\
\\item $d_\{extend\} = 2$\
\\item $r_\{include\} = 113$\
\\end\{itemize\}\
\
\\begin\{figure\}[h!]\
\\centering\
\\includegraphics[scale=0.6]\{pictures/scalingAlphaTheoretically_113.png\}\
\\caption\{The chart displays how the average error increases when $\\alpha$ is increasing. See section \\ref\{sect:FS\} for the definition of $\\alpha$. Each average error sample is based on the errors of 1000 generated cells. See section \\ref\{sect:D-DL\} for the definition of $M$. See section \\ref\{sect:D-DL\} and \\ref\{sect:D-CD\} for the definition of $n$. For example, the red line displays average error values for different values of $\\alpha$ when cells are generated with $M=20$ and D-CTL is run with $n=20$.\}\
\\label\{fig:scalingAlphaTheoretically_113\}\
\\end\{figure\}\
\
We use the following constant parameters for the chart in figure \\ref\{fig:scalingAlphaTheoretically_200\}:\
\\begin\{itemize\}\
\\item $d_\{extend\} = 2$\
\\item $r_\{include\} = 200$\
\\end\{itemize\}\
\
\\begin\{figure\}[h!]\
\\centering\
\\includegraphics[scale=0.6]\{pictures/scalingAlphaTheoretically_200.png\}\
\\caption\{The chart displays how the average error increases when $\\alpha$ is increasing. See section \\ref\{sect:FS\} for the definition of $\\alpha$. Each average error sample is based on the errors of 1000 generated cells. See section \\ref\{sect:D-DL\} for the definition of $M$. See section \\ref\{sect:D-DL\} and \\ref\{sect:D-CD\} for the definition of $n$. For example, the red line displays average error values for different values of $\\alpha$ when cells are generated with $M=20$ and D-CTL is run with $n=20$.\}\
\\label\{fig:scalingAlphaTheoretically_200\}\
\\end\{figure\}\
\
As we can see from figure \\ref\{fig:scalingAlphaTheoretically_113\} and \\ref\{fig:scalingAlphaTheoretically_200\}, the graphs make a big jump in average error between $45^\{\\circ\}$ and $90^\{\\circ\}$. To understand this sudden increase, we must look into the geometry of our problem. Recall that the sub-routine D-DL in the D-CTL algorithm utilizes the longest distance between two measurements to compute $l_\{direction\}$. Also keep in mind that we still are assuming the measurements within a cell sector are randomly distributed. We also assume that $r_\{include\}$ is properly large. When a cell sector angle $\\alpha = 10^\{\\circ\}$, the distance between the cell edges is smaller than $r_\{include\}$, which means the D-DL algorithm will compute a reliable direction line. This is also the case for $\\alpha = 45^\{\\circ\}$. See figure \\ref\{fig:cell_errorincrease_45deg\}. When $\\alpha$ increases beyond a certain point, the distance between the cell edges will be larger than $r_\{include\}$. See figure \\ref\{fig:cell_errorincrease_90deg\}. This means that D-DL will compute a $l_\{direction\}$ that gives a completely wrong impression of the direction of the cell. See figure \\ref\{fig:cell_90deg_100meas_distance\} and \\ref\{fig:cell_90deg_100meas_distance_chosenCell\}. We clearly need to come up with a better approach for estimating cell tower locations for cells with large cell sector angles.\
\
\\begin\{figure\}[h!]\
\\centering\
\\begin\{subfigure\}[t]\{0.45\\textwidth\}\
    \\centering\
    \\includegraphics[scale=0.48]\{pictures/cell_errorincrease_45deg.png\}\
    \\caption\{Cell sector with $\\alpha = 45^\{\\circ\}$\}\
    \\label\{fig:cell_errorincrease_45deg\}\
  \\end\{subfigure\}\
  \\hspace\{.03\\textwidth\}\
  \\begin\{subfigure\}[t]\{0.45\\textwidth\}\
    \\centering\
    \\includegraphics[scale=0.48]\{pictures/cell_errorincrease_90deg.png\}\
    \\caption\{Cell sector with $\\alpha = 90^\{\\circ\}$\}\
    \\label\{fig:cell_errorincrease_90deg\}\
  \\end\{subfigure\}\
\\caption\{When $\\alpha$ increases beyond a certain point, the distance between the cell edges will get larger than $r_\{include\}$.\}\
\\end\{figure\}\
\
\\begin\{figure\}[h!]\
\\centering\
\\begin\{subfigure\}[t]\{0.45\\textwidth\}\
    \\centering\
    \\includegraphics[scale=0.85]\{pictures/cell_90deg_100meas_distance.png\}\
    \\caption\{The black square and lines represent the correct cell tower location and cell edges. The black dots represent measurements. The purple line represents $l_\{direction\}$.\}\
    \\label\{fig:cell_90deg_100meas_distance\}\
  \\end\{subfigure\}\
  \\hspace\{.03\\textwidth\}\
  \\begin\{subfigure\}[t]\{0.45\\textwidth\}\
    \\centering\
    \\includegraphics[scale=0.85]\{pictures/cell_90deg_100meas_distance_chosenCell.png\}\
    \\caption\{The black dots represent measurements. The purple line represents $l_\{direction\}$. The pink square and lines represent the estimated cell tower location and cell edges.\}\
    \\label\{fig:cell_90deg_100meas_distance_chosenCell\}\
  \\end\{subfigure\}\
\\caption\{Generated cell with $\\alpha = 90^\{\\circ\}$ and $M=100$. We attempt to estimate a cell tower location with the D-CTL algorithm.\}\
\\end\{figure\}\
\
\\section\{Chapter Review\}\
In this chapter we have step by step developed an algorithm for estimating a cell tower location based on the distance between the cell's measurements. In addition, we have tested the algorithm on different values of different parameters to get an understanding of how the algorithm scales. Based on the several tests we conclude that D-CTL performs poorly on cells with cell sector angles of $120^\{\\circ\}$.\
\
\\chapter\{Cell Tower Localization based on Received Signal Strength (RSS-CTL)\}\
\\label\{chapt:RSS-CTL\}\
\
In this chapter we develop an algorithm for estimating the location of a cell tower, based on the RSS values among measurements belonging to the cell. We start by presenting RSS as the new parameter. Then we present the sub-routines and complete algorithm for estimating a cell tower location based on RSS values among measurements. The algorithm and it's sub-routines are briefly summarized in table \\ref\{table:RSS-CTL\} and \\ref\{table:subRoutines_RSS-CTL\}. After this we will experiment with the different parameters involved in the algorithm, and deadzones. We end the chapter by concluding that utilizing RSS estimates more accurate cell tower locations than by utilizing distance.\
\
\\begin\{table\}[h!]\
  \\center\
  \\begin\{tabularx\}\{\\textwidth\}\{|p\{3.1cm\}|c|p\{7.5cm\}|c|\}\
    \\hline\
    \\cellcolor[gray]\{0.9\}Algorithm&\\cellcolor[gray]\{0.9\}Abbrev.&\\cellcolor[gray]\{0.9\}Description&\\cellcolor[gray]\{0.9\}Sect.\\\\\\hline\
    %Cell Tower Localization based on Distance & D-CTL & Estimates the cell tower location of a cell by utilizing distance between measurements. Uses the following sub-routines: D-DL, FS, D-CD. & \\ref\{sect:D-CTL\} \\\\\\hline\
    Cell Tower Localization based on RSS & RSS-CTL & Estimates the cell tower location of a cell by utilizing difference in RSS among measurements. Uses the following sub-routines: RSS-DL, CS, FS, RSS-CD. & \\ref\{sect:RSS-CTL\} \\\\\\hline\
  \\end\{tabularx\}\
  \\caption\{Cell Tower Localization based on RSS (RSS-CTL).\}\
  \\label\{table:RSS-CTL\}\
\\end\{table\}\
\
\\begin\{table\}[h!]\
  \\center\
  \\begin\{tabularx\}\{\\textwidth\}\{|p\{2.7cm\}|c|p\{8.2cm\}|c|\}\
    \\hline\
    \\cellcolor[gray]\{0.9\}Sub-routine&\\cellcolor[gray]\{0.9\}Abbrev.&\\cellcolor[gray]\{0.9\}Description&\\cellcolor[gray]\{0.9\}Sect.\\\\\\hline\
    %Direction Line based on Distance & D-DL & Computes a line between the two measurements that are furthest apart from each other, chosen from $n^2$ randomly picked pairs of measurements. & \\ref\{sect:D-DL\} \\\\\\hline\
    Direction Line based on RSS & RSS-DL & Computes a line between the two measurements whose difference in RSS values are the largest, chosen from $n^2$ randomly picked pairs of measurements. & \\ref\{sect:RSS-DL\} \\\\\\hline\
    Compute Sector & CS & Used within FS. Based on the line computed by RSS-DL, computes the actual cell sectors we try to fit the measurements within. & \\ref\{sect:FS\} \\\\\\hline\
    Find Sector & FS & Based on the line computed by RSS-DL, finds a cell sector every measurement fits within. & \\ref\{sect:FS\} \\\\\\hline\
    %Cell Direction based on Distance & D-CD & Based on two estimated cell sectors computed by FS, guesses which one is the best choice based on distance. & \\ref\{sect:D-CD\} \\\\\\hline\
    Cell Direction based on RSS & RSS-CD & Based on two estimated cell sectors computed by FS, guesses which one is the best choice based on RSS. & \\ref\{sect:RSS-CD\} \\\\\\hline\
  \\end\{tabularx\}\
  \\caption\{Sub-routines for the RSS-CTL algorithm.\}\
  \\label\{table:subRoutines_RSS-CTL\}\
\\end\{table\}\
\
\\section\{Large Angles: Estimating Cell Tower Location based on Received Signal Strength (RSS)\}\
\\label\{sect:largeAnglesRSS\}\
\
We will now step away from the simplification of our problem definition. The original problem definition concerns cell sector angles $\\alpha = 120^\{\\circ\}$. As we saw in section \\ref\{sect:greaterAngles\}, the average error increased when $\\alpha$ increased, when we used D-CTL to estimate cell tower locations. For $\\alpha = 120^\{\\circ\}$ D-CTL performed poorly. This means we need to come up with another way to estimate cell tower locations for large values of $\\alpha$. We introduce the parameter \\textit\{Received Signal Strength\} (RSS). For the duration of this chapter we will assume that $\\alpha = 120^\{\\circ\}$ and that RSS is available.\
\
\\paragraph\{RSS as Parameter\}\
We assume that each measurement is equipped with RSS. We will now utilize RSS instead of distance between measurements to estimate cell tower locations. To do this we need to give each measurement a RSS value upon generation. See section \\ref\{sect:testData\}. The sub-routines that utilize RSS are very similar to the ones described in section \\ref\{sect:D-DL\}, \\ref\{sect:FS\} and \\ref\{sect:D-CD\}.\
\
\\section\{Sub-Routine: Direction Line based on RSS (RSS-DL)\}\
\\label\{sect:RSS-DL\}\
\
\\begin\{figure\}[h!]\
\\centering\
\\begin\{subfigure\}[t]\{0.3\\textwidth\}\
    \\centering\
    \\includegraphics[scale=0.8]\{pictures/cell_120deg_100meas.png\}\
    \\caption\{The square represents the cell tower, the two lines represent the cell edges, and the dots represent the measurements.\}\
    \\label\{fig:cell_120deg_100meas\}\
  \\end\{subfigure\}\
  \\hspace\{.03\\textwidth\}\
  \\begin\{subfigure\}[t]\{0.3\\textwidth\}\
    \\centering\
    \\includegraphics[scale=0.8]\{pictures/cell_120deg_100meas_noCT_noEdges.png\}\
    \\caption\{Only the measurements are shown.\}\
    \\label\{fig:cell_120deg_100meas_noCT_noEdges\}\
  \\end\{subfigure\}\
  \\hspace\{.03\\textwidth\}\
  \\begin\{subfigure\}[t]\{0.3\\textwidth\}\
    \\centering\
    \\includegraphics[scale=0.8]\{pictures/cell_120deg_100meas_RSS.png\}\
    \\caption\{RSS-DL has computed $l_\{direction\}$ from the measurements, which is represented by the purple line.\}\
    \\label\{fig:cell_120deg_100meas_RSS\}\
  \\end\{subfigure\}\
\\caption\{A generated cell with $\\alpha = 120^\{\\circ\}$ and $M=100$.\}\
\\end\{figure\}\
\
Just as in section \\ref\{sect:D-DL\}, we want to estimate to which direction of the measurements the cell tower is located. See figure \\ref\{fig:cell_120deg_100meas\} and \\ref\{fig:cell_120deg_100meas_noCT_noEdges\}. Measurements close to the cell tower have large RSS values, and measurements far away have small RSS values. We utilize this property to compute $l_\{direction\}$ for cells with $\\alpha = 120^\{\\circ\}$.\
\
We present the first sub-routine: \\textit\{Direction Line based on RSS\} (RSS-DL). The purpose of RSS-DL is to estimate the direction from the measurements the cell tower is located. It does that by iterating over $n^2$ pairs of measurements and finds the pair with the largest difference in RSS between them. RSS-DL then forms a line $l_\{direction\}$ with the two measurements as endpoints. See figure \\ref\{fig:cell_120deg_100meas_RSS\}.\
\
The only difference from the D-DL sub-routine is that RSS-DL compares RSS values between two measurements instead of distance. See algorithm \\ref\{alg:RSS-DL\}.\
\
\\begin\{algorithm\}[h!]\
  \\center\
  \\begin\{tabular\}\{|l|\}\
    \\hline\
    \\textbf\{Algorithm 6:\} Direction Line based on RSS (RSS-DL)\\\\\
    \\hline \\hline\
    \\begin\{minipage\}\{1.0\\linewidth\}\
      \\begin\{tabbing\}\
        \\=\\textbf\{output:\} \\=\\kill\
        \\>\\textbf\{input:\}\\>$M$, $n$ \\\\ \
        \\>\\textbf\{output:\}\\>$l_\{direction\}$\
      \\end\{tabbing\}\
    \\end\{minipage\}\\\\\\hline \\hline\
    \\begin\{minipage\}\{1.0\\linewidth\}\
      \\vspace\{2pt\}\
      \\begin\{tabbing\}\
      Declare variables $ep_1$,$ep_2$ and $rss_\{difference\}=0$\\\\\
      \\textbf\{for\} $0$ to $n$\\\\\
      %\\=\\textbf\{output:\} \\=\\kill\
      \\hspace\{10pt\}randomly pick a measurement $a \\in M$\\\\ \
      \\hspace\{10pt\}\\textbf\{for\} $0$ to $n$\\\\\
      \\hspace\{20pt\}randomly pick a measurement $b \\in M$ such that $a \\neq b$\\\\ \
      \\hspace\{20pt\}\\textbf\{if\} the difference in RSS between $a$ and $b$ is larger than the difference in\\\\ \
      \\hspace\{32pt\}RSS currently stored in $rss_\{difference\}$, store $a$ in $ep_1$, $b$ in $ep_2$, and the\\\\\
      \\hspace\{32pt\}difference in RSS between them in $rss_\{difference\}$\\\\\
      \\textbf\{return\} $l_\{direction\}$ with $ep_1$ and $ep_2$ as endpoints\
      \\end\{tabbing\}\
    \\end\{minipage\}\\\\\
    \\hline\
  \\end\{tabular\}\
%\\end\{figure\}\
\\caption\{Direction Line based on RSS (RSS-DL).\}\
\\label\{alg:RSS-DL\}\
\\end\{algorithm\}\
\
\\subsubsection\{Notations Intruduced in This Section:\}\
\\begin\{description\}\
\\item[$RSS$:] The strength of the signal from a cell tower that is received by a mobile device.\
\\item[$rss_\{difference\}$:] The difference in RSS between two measurements.\
\\end\{description\}\
\
\\section\{Sub-Routines: Compute Sector (CS) and Find Sector (FS)\}\
\
\\begin\{figure\}[h!]\
\\centering\
\\begin\{subfigure\}[t]\{0.45\\textwidth\}\
    \\centering\
    \\includegraphics[scale=0.8]\{pictures/cell_120deg_100meas_RSS_sectors.png\}\
    \\caption\{The purple line represents $l_\{direction\}$. The blue and pink squares and lines represent the two estimated cell sectors and cell towers solutions.\}\
    \\label\{fig:cell_120deg_100meas_RSS_sectors\}\
  \\end\{subfigure\}\
  \\hspace\{.03\\textwidth\}\
  \\begin\{subfigure\}[t]\{0.45\\textwidth\}\
    \\centering\
    \\includegraphics[scale=0.8]\{pictures/cell_120deg_100meas_RSS_sectors_measurements.png\}\
    \\caption\{The black dots represent measurements. The blue and pink squares and lines represent the two estimated cell sectors and cell towers solutions.\}\
    \\label\{fig:cell_120deg_100meas_RSS_sectors_measurements\}\
  \\end\{subfigure\}\
\\caption\{A generated cell with $\\alpha = 120^\{\\circ\}$ and $M = 100$ .\}\
\\end\{figure\}\
\
We now assume that we have used RSS-DL to compute $l_\{direction\}$. Just as in section \\ref\{sect:FS\} we use the CS and FS sub-routines to compute two estimated cell sectors. See figure \\ref\{fig:cell_120deg_100meas_RSS_sectors\} and \\ref\{fig:cell_120deg_100meas_RSS_sectors_measurements\}. We do not alter these algorithms in any way.\
\
\\section\{Sub-Routine: Choose Direction based on RSS (RSS-CD)\}\
\\label\{sect:RSS-CD\}\
\
\\begin\{figure\}[h!]\
\\centering\
\\begin\{subfigure\}[t]\{0.45\\textwidth\}\
    \\centering\
    \\includegraphics[scale=0.8]\{pictures/cell_120deg_100meas_RSS_everything.png\}\
    \\caption\{The black square and lines represent the correct cell tower and cell sector. The black dots represent the measurements. The purple line represents $l_\{direction\}$. The blue and pink squares and lines represent the two estimated cell sectors and cell towers solutions.\}\
    \\label\{fig:cell_120deg_100meas_RSS_everything\}\
  \\end\{subfigure\}\
  \\hspace\{.03\\textwidth\}\
  \\begin\{subfigure\}[t]\{0.45\\textwidth\}\
    \\centering\
    \\includegraphics[scale=0.8]\{pictures/cell_120deg_100meas_RSS_chosenCell.png\}\
    \\caption\{The black dots represent the measurements. The pink square and lines represent the chosen estimated cell sector and cell tower solution.\}\
    \\label\{fig:cell_120deg_100meas_RSS_chosenCell\}\
  \\end\{subfigure\}\
\\caption\{A generated cell with a $10^\{\\circ\}$ sector angle and 20 measurements.\}\
\\end\{figure\}\
\
We now assume we have used RSS-DL to compute $l_\{direction\}$ and used FS to compute two estimated cell sector solutions $C_\{heuristic1\}$ and $C_\{heuristic2\}$. Just as in section \\ref\{sect:D-CD\} we want to choose one of them as the final estimated cell sector solution with a corresponding cell tower location. See figure \\ref\{fig:cell_120deg_100meas_RSS_everything\} and \\ref\{fig:cell_120deg_100meas_RSS_chosenCell\}. To do this we take advantage of hypothesis 1 described in section \\ref\{sect:D-CD\}, with some alterations. In the hypthesis we calculate the mean of the least possible distances from measurements to $l$. $l$ was the line that would perfectly give an impression of which direction the cell tower was pointing. Now, we take advantage of the fact that measurements closer to the cell tower have a stronger RSS than those further away.\
\
We present the fourth sub-routine: \\textit\{Choose Direction based on RSS\} (RSS-CD). The purpose of RSS-CD is to determine if $C_\{heuristic1\}$ or $C_\{heuristic2\}$ is the better choice for an estimated cell sector solution. The sub-routine is very similar to the D-CD sub-routine, but we calculate the means differently. We calculate the mean $mean_1$ of the RSS values of the measurements in $S_1$ and the mean $mean_2$ of the RSS values of the measurements in $S_2$. See algorithm \\ref\{alg:RSS-CD\}.\
\
\\begin\{algorithm\}[h!]\
  \\center\
  \\begin\{tabular\}\{|l|\}\
    \\hline\
    \\textbf\{Algorithm 7:\} Cell Direction based on RSS (RSS-CD)\\\\\
    \\hline \\hline\
    \\begin\{minipage\}\{1.0\\linewidth\}\
      \\begin\{tabbing\}\
        \\=\\textbf\{output:\} \\=\\kill\
        \\>\\textbf\{input:\}\\>$M$, $n$, $l_\{direction\}$, $C_\{heuristic1\}$, $C_\{heuristic2\}$\\\\ \
        \\>\\textbf\{output:\}\\>$C_\{heuristic1\}$ or $C_\{heuristic2\}$\
      \\end\{tabbing\}\
    \\end\{minipage\}\\\\\\hline \\hline\
    \\begin\{minipage\}\{1.0\\linewidth\}\
      \\vspace\{2pt\}\
      \\begin\{tabbing\}\
      pick $n$ random measurements $S \\in M$\\\\\
      let the measurements $\\in S$ closer to $ep_1$ than $ep_2$ be $S_1$, and the\\\\\
      \\hspace\{12pt\}measurements $\\in S$ closer to $ep_2$ than $ep_1$ be $S_2$\\\\\
      calculate the mean $mean_1$ of the RSS values of the measurements in $S_1$\\\\\
      calculate the mean $mean_2$ of the RSS values of the measurements in $S_2$\\\\\
      \\textbf\{if\} $mean_1 < mean_2$,\\\\\
      \\hspace\{12pt\}\\textbf\{return\} $C_\{heuristic1\}$ if it's cell tower location is closer to $ep_1$ than the cell\\\\\
       \\hspace\{24pt\}tower location of $C_\{heuristic2\}$, or \\textbf\{return\} $C_\{heuristic2\}$ if it's cell tower\\\\\
       \\hspace\{24pt\}location is closer to $ep_1$ than the cell tower location of $C_\{heuristic1\}$\\\\\
       \\textbf\{if\} $mean_2 < mean_1$,\\\\\
      \\hspace\{12pt\}\\textbf\{return\} $C_\{heuristic1\}$ if it's cell tower location is closer to $ep_2$ than the cell\\\\\
       \\hspace\{24pt\}tower location of $C_\{heuristic2\}$, or \\textbf\{return\} $C_\{heuristic2\}$ if it's cell tower\\\\\
       \\hspace\{24pt\}location is closer to $ep_2$ than the cell tower location of $C_\{heuristic1\}$\
      \\end\{tabbing\}\
    \\end\{minipage\}\\\\\
    \\hline\
  \\end\{tabular\}\
  \\caption\{Cell Direction based on RSS (RSS-CD).\}\
  \\label\{alg:RSS-CD\}\
\\end\{algorithm\}\
\
\\subsubsection\{Notations Intruduced in This Section:\}\
\\begin\{description\}\
\\item[$mean_1$, $mean_2$:] In this section, $mean_1$ and $mean_2$ was used differently than in section \\ref\{sect:D-CD\}. Here, $mean_1$ and $mean_2$ are the means of the RSS values of the measurements in $S_1$ and $S_2$, respectively.\
\\end\{description\}\
\
\\section\{Algorithm: Cell Tower Localization based on RSS (RSS-CTL)\}\
\\label\{sect:RSS-CTL\}\
\
We will now combine the sub-routines defined in section \\ref\{sect:RSS-DL\}, \\ref\{sect:FS\} and \\ref\{sect:RSS-CD\} into one complete algorithm for localizing cell towers based on RSS: The \\textit\{Cell Tower Localization based on RSS\} (RSS-CTL) algorithm. See algorithm \\ref\{alg:RSS-CTL\}.\
\
\\begin\{algorithm\}[h!]\
  \\center\
  \\begin\{tabular\}\{|l|\}\
    \\hline\
    \\textbf\{Algorithm 8:\} Cell Tower Localization based on RSS (RSS-CTL)\\\\\
    \\hline \\hline\
    \\begin\{minipage\}\{1.0\\linewidth\}\
      \\begin\{tabbing\}\
        \\=\\textbf\{output:\} \\=\\kill\
        \\>\\textbf\{input:\}\\>$M$, $n$, $d_\{extend\}$, $\\alpha$\\\\ \
        \\>\\textbf\{output:\}\\>An estimated cell tower location\
      \\end\{tabbing\}\
    \\end\{minipage\}\\\\\\hline \\hline\
    \\begin\{minipage\}\{1.0\\linewidth\}\
      \\vspace\{2pt\}\
      \\begin\{tabbing\}\
      declare varible $l_\{direction\}$\\\\\
      run RSS-DL with $M$ and $n$ as input and store the output in $l_\{direction\}$\\\\ \
      declare variables $C_\{heuristic1\}$ and $C_\{heuristic2\}$\\\\\
      run FS with $M$, $l_\{direction\}$, $d_\{extend\}$ and $\\alpha$ as input, compute estimated cell\\\\\
      \\hspace\{12pt\}sector solution for endpoint $ep_1$ of $l_\{direction\}$, and store the output in\\\\\
      \\hspace\{12pt\}$C_\{heuristic1\}$\\\\\
      run FS with $M$, $l_\{direction\}$, $d_\{extend\}$ and $\\alpha$ as input, compute estimated cell\\\\\
      \\hspace\{12pt\}sector solution for endpoint $ep_2$ of $l_\{direction\}$, and store the output in\\\\\
      \\hspace\{12pt\}$C_\{heuristic2\}$\\\\\
      declare variable $C_\{heuristic\}$\\\\\
      run RSS-CD with $M$, $n$, $l_\{direction\}$, $C_\{heuristic1\}$ and $C_\{heuristic2\}$ as input and\\\\\
      \\hspace\{12pt\}store the output in $C_\{heuristic\}$\\\\\
      \\textbf\{return\} the cell tower location of $C_\{heuristic\}$\
      \\end\{tabbing\}\
    \\end\{minipage\}\\\\\
    \\hline\
  \\end\{tabular\}\
  \\caption\{Cell Tower Localization based on RSS (RSS-CTL).\}\
  \\label\{alg:RSS-CTL\}\
\\end\{algorithm\}\
\
\\section\{Scaling $d_\{extend\}$\}\
\\label\{sect:scalingD_120deg\}\
In section \\ref\{sect:scalingD_10deg\} we ran the D-CTL algorithm on cells with $\\alpha = 10^\{\\circ\}$, for different values of $d_\{extend\}$. Now do the same on cells with $\\alpha = 120^\{\\circ\}$. In addition, we will run both D-CTL and RSS-CTL for comparison. We test and compare D-CTL and RSS-CTL with different values of $d_\{extend\}$. The average error values are displayed in the chart in figure \\ref\{fig:scalingDTheoretically_Dist_RSS\}. We use the following values of $d_\{extend\}$:\
\\begin\{itemize\}\
\\item $d_\{extend\}=2$\
\\item $d_\{extend\}=4$\
\\item $d_\{extend\}=8$\
\\item $d_\{extend\}=16$\
\\item $d_\{extend\}=32$\
\\item $d_\{extend\}=64$\
\\end\{itemize\}\
\
We use the following constant parameters:\
\\begin\{itemize\}\
\\item $\\alpha = 120^\{\\circ\}$\
\\item $r_\{include\} = 113$\
\\end\{itemize\}\
\
\\begin\{figure\}[h!]\
\\centering\
\\includegraphics[scale=0.6]\{pictures/scalingDTheoretically_Dist_RSS.png\}\
\\caption\{The chart displays how the average error increases when $d_\{extend\}$ is increasing, for both the D-CTL and RSS-CTL algorithms. See section \\ref\{sect:FS\} for the definition of $d_\{extend\}$. Each average error sample is based on the errors of 1000 generated cells. See section \\ref\{sect:D-DL\} for the definition of $M$. See section \\ref\{sect:D-DL\} and \\ref\{sect:D-CD\} for the definition of $n$. For example, the red line displays average error values for different values of $d_\{extend\}$ when we run RSS-CTL with $n=80$ and cells are generated with $M=100$.\}\
\\label\{fig:scalingDTheoretically_Dist_RSS\}\
\\end\{figure\}\
\
We clearly see from the chart in figure \\ref\{fig:scalingDTheoretically_Dist_RSS\} that the average error increases when $d_\{extend\}$ is increasing, just as in the chart in figure \\ref\{fig:scalingDTheoretically\}. The average error values from running D-CTL are higher than those from running RSS-CTL, but this is just as expected when $\\alpha=120^\{\\circ\}$. Recall that we found the average running time when we generated cells with $M=100$, $r_\{include\}=113$ and $\\alpha = 10^\{\\circ\}$ and ran D-CTL with $n=80$ and $d_\{extend\}=2$, in section \\ref\{sect:scalingD_10deg\}. $r_\{include\}$ and $\\alpha$ were constants. This was the most time consuming scenario, and was to justify further use of $d_\{extend\}=2$. The average running time for this scenario was \\textbf\{0.51ms\}.\
\
Now we do the same for cells with $\\alpha=120^\{\\circ\}$. The assumption is that the D-CTL and RSS-CTL algorithms will run for a longer time with $d_\{extend\}=2$, but on the other hand will compute the most accurate estimated cell tower locations. The worst case time will occur when we generate cells with $M=1000$, and run the D-CTL and RSS-CTL algorithms with $n=640$ and $d_\{extend\}=2$. $\\alpha$ and $r_\{include\}$ are still constants. See the light blue and light green graphs in the chart in figure \\ref\{fig:scalingDTheoretically_Dist_RSS\}. The average running time with these parameters for D-CTL was \\textbf\{11.88ms\}. The average running time for RSS-CTL was \\textbf\{10.24ms\}. Because these average times are so small, we conclude that we can use $d_\{extend\}=2$ for further computations of estimated cell tower locations.\
\
\\section\{Scaling Maximum Distance from Cell Tower\}\
\\label\{sect:scalingR_120deg\}\
In section \\ref\{sect:scalingR_10deg\} we ran the D-CTL algorithm on cells with $\\alpha = 10^\{\\circ\}$, for different values of $r_\{include\}$. Now we do the same on cells with $\\alpha = 120^\{\\circ\}$. In addition, we will run both D-CTL and RSS-CTL for comparison. We test and compare D-CTL and RSS-CTL with different values of $r_\{include\}$. The average error values are displayed in the chart in figure \\ref\{fig:scalingRTheoretically_Dist_RSS\}. We use the following values of $r_\{include\}$:\
\\begin\{itemize\}\
\\item $r_\{include\}=30$\
\\item $r_\{include\}=70$\
\\item $r_\{include\}=113$\
\\item $r_\{include\}=160$\
\\item $r_\{include\}=200$\
\\end\{itemize\}\
\
We use the following constant parameters:\
\\begin\{itemize\}\
\\item $\\alpha = 120^\{\\circ\}$\
\\item $d_\{extend\} = 2$\
\\end\{itemize\}\
\
\\begin\{figure\}[h!]\
\\centering\
\\includegraphics[scale=0.6]\{pictures/scalingRTheoretically_Dist_RSS.png\}\
\\caption\{The chart displays how the average error increases when $r_\{include\}$ is increasing, for both the D-CTL and RSS-CTL algorithms. See section \\ref\{sect:scalingR_10deg\} for the definition of $r_\{include\}$. Each average error sample is based on the errors of 1000 generated cells. See section \\ref\{sect:D-DL\} for the definition of $M$. See section \\ref\{sect:D-DL\} and \\ref\{sect:D-CD\} for the definition of $n$. For example, the red line displays average error values for different values of $r_\{include\}$ when we run D-CTL with $n=640$ and cells are generated with $M=1000$..\}\
\\label\{fig:scalingRTheoretically_Dist_RSS\}\
\\end\{figure\}\
\
The graphs in the chart in figure \\ref\{fig:scalingRTheoretically_Dist_RSS\} are very similar to the graphs in the chart in figure \\ref\{fig:scalingRTheoretically\}. It is interesting to see that the average error for RSS-CTL increases more slowly than the average error for D-CTL. This strengthen our conclusion that RSS-CTL computes more accurate cell tower locations than D-CTL for cells with $\\alpha = 120^\{\\circ\}$.\
\
\\section\{Deadzones\}\
\\label\{sect:deadzones\}\
\
To properly simulate a cell we need to consider that there may be areas within the cell sector where no measurements are recorded. We call such areas \\textit\{deadzones\}. In reality, deadzones can occur for several different reasons. For example, a deadzone can occur behind a tall hill that completely blocks the signal. Or if there is a lake within the cell sector, this may potentially form a deadzone. Due to potential deadzones' variation in size, shape and location, they are difficult to simulate. For simplicity we will simulate deadzones as circular shapes, but vary the size and location within the cell sector. See figure \\ref\{fig:deadzone1\} and \\ref\{fig:deadzone2\}, and section \\ref\{sect:testData\}. This strategy also stimulates the fact that for example only 40\\% of a lake is within a sell sector.\
\
\\begin\{figure\}[h!]\
\\centering\
\\begin\{subfigure\}[t]\{0.45\\textwidth\}\
    \\centering\
    \\includegraphics[scale=0.7]\{pictures/cell_dz1.png\}\
    \\caption\{$r_\{dz\}=30$\}\
    \\label\{fig:deadzone1\}\
  \\end\{subfigure\}\
  \\hspace\{.03\\textwidth\}\
  \\begin\{subfigure\}[t]\{0.45\\textwidth\}\
    \\centering\
    \\includegraphics[scale=0.7]\{pictures/cell_dz2.png\}\
    \\caption\{$r_\{dz\}=40$\}\
    \\label\{fig:deadzone2\}\
  \\end\{subfigure\}\
\\caption\{Two generated cells, each with a deadzone.\}\
\\end\{figure\}\
\
\
We ask the following question: Does the D-CTL and RSS-CTL algorithms perform worse when deadzones are present within cell sectors? We test and compare D-CTL and RSS-CTL with different values of the deadzone radius $r_\{dz\}$. The average error values are displayed in two different charts in figure \\ref\{fig:scalingDZTheoretically_113\} and \\ref\{fig:scalingDZTheoretically_200\}. The difference between the charts is the value of $r_\{include\}$. The chart in figure \\ref\{fig:scalingDZTheoretically_113\} has $r_\{include\}=113$. The chart in figure \\ref\{fig:scalingDZTheoretically_200\} has $r_\{include\}=200$. We use the following values of $r_\{dz\}$:\
\\begin\{itemize\}\
\\item $r_\{dz\}=10$\
\\item $r_\{dz\}=20$\
\\item $r_\{dz\}=30$\
\\item $r_\{dz\}=40$\
\\end\{itemize\}\
\
We use the following constant parameters for the chart in figure \\ref\{fig:scalingDZTheoretically_113\}:\
\\begin\{itemize\}\
\\item $\\alpha = 120^\{\\circ\}$\
\\item $d_\{extend\} = 2$\
\\item $r_\{include\}=113$\
\\end\{itemize\}\
\
\\begin\{figure\}[h!]\
\\centering\
\\includegraphics[scale=0.6]\{pictures/scalingDZTheoretically_113.png\}\
\\caption\{The chart displays how the average error does not change significatly when $r_\{dz\}$ is increasing, for both the D-CTL and RSS-CTL algorithms. Each average error sample is based on the errors of 1000 generated cells. See section \\ref\{sect:D-DL\} for the definition of $M$. See section \\ref\{sect:D-DL\} and \\ref\{sect:D-CD\} for the definition of $n$. For example, the red line displays average error values for different values of $r_\{dz\}$ when we run D-CTL with $n=20$ and cells are generated with $M=100$.\}\
\\label\{fig:scalingDZTheoretically_113\}\
\\end\{figure\}\
\
We use the following constant parameters for the chart in figure \\ref\{fig:scalingDZTheoretically_200\}:\
\\begin\{itemize\}\
\\item $\\alpha = 120^\{\\circ\}$\
\\item $d_\{extend\} = 2$\
\\item $r_\{include\}=200$\
\\end\{itemize\}\
\
\\begin\{figure\}[h!]\
\\centering\
\\includegraphics[scale=0.6]\{pictures/scalingDZTheoretically_200.png\}\
\\caption\{The chart displays how the average error does not change significatly when $r_\{dz\}$ is increasing, for both the D-CTL and RSS-CTL algorithms. Each average error sample is based on the errors of 1000 generated cells. See section \\ref\{sect:D-DL\} for the definition of $M$. See section \\ref\{sect:D-DL\} and \\ref\{sect:D-CD\} for the definition of $n$. For example, the red line displays average error values for different values of $r_\{dz\}$ when we run RSS-CTL with $n=160$ and cells are generated with $M=1000$.\}\
\\label\{fig:scalingDZTheoretically_200\}\
\\end\{figure\}\
\
As we can see from figure \\ref\{fig:scalingDZTheoretically_113\} and \\ref\{fig:scalingDZTheoretically_200\}, the average error does not change significantly when we include larger and larger deadzones in the cell sectors. We therefore conclude that both D-CTL and RSS-CTL can estimate just as good cell tower locations when deadzones are present, as when deadzones are not present.\
\
\\subsubsection\{Notations Intruduced in This Section:\}\
\\begin\{description\}\
\\item[$r_\{dz\}$:] The radius deciding the size of a deadzone.\
\\end\{description\}\
\
\\section\{Chapter Review\}\
In this chapter we have step by step developed an algorithm for estimating cell tower locations based on the RSS values among each cell's measurements. In addition, we have tested the algorithm on different values of different parameters to get an understanding of how the algorithm scales. Based on the several tests we conclude that RSS-CTL estimates more accurate cell tower locations than D-CTL. In chapter \\ref\{chap:results\} we will test both algorithms on real data. We want to keep testing D-CTL in addition to RSS-CTL as this can be an alternative if RSS is not available in the measurements.\
\
\
\\newpage\
\\chapter\{Understanding the OpenCellID Data Set\}\
\\label\{chapt:opencelliddata\}\
We have developed two algorithms for localizing cell towers: the D-CTL and RSS-CTL algorithms. Now we want to test them on real data. In this chapter we explain how we retrieve data from OpenCellID.org. We discuss the format and structure of the data, and how we select proper subsets to test the two algorithms on.\
\
The subsets we test D-CTL and RSS-CTL on was downloaded April 4th 2015. As new measurements are added and since OpenCellID always strives to improve their data, the OpenCellID database is constantly updated.\
\
\\section\{Initiating Data Retrieval\}\
To access the data we need an API-key, which is easily retrievable from the OpenCellID administrators. This key needs to be included every time we want access to data on OpenCellID.org. Obtaining the key is very simple. We only need to register on the site with our name and email.\
\
When we have the API-key there are two ways to access the data. The first way is to download a copy of the entire database to a computer piece by piece. The only restriction on this approach is a specific number of times a day we are allowed to download different pieces of the database for free. The number of times vary for the different pieces, but we can download all of the pieces at least once a day.\
\
The second approach is performing HTTP GET or POST requests to the OpenCellID database. This approach lets us query for very specific parts of the database by adding parameters to the request. Those contributing to OpenCellID can do this as much as they want. Others need to pay for it. We were considered contributors for doing the research contained in this thesis.\
\
We take advantage of both approaches. The first approach is handy when we want to compute statistics and get an overview of the data. For example finding out how many cells have been registered in Norway, or how many that use the broadcasting technology GSM worldwide. The second approach is more useful when we want to target small subsets of the database. Then we do not wish to traverse every piece of the entire database every time.\
\
%\\section\{Coping with the data\}\
\\section\{The Data Objects\}\
\\label\{sect:dataObjects\}\
The OpenCellID data is structured as follows. There are cell and measurement objects. Measurement objects are created from data collected by users, as mentioned in section \\ref\{sect:motivation\}. When a collected measurement is for a cell that has not been seen before, a new cell object is created. Several of the cell object's data fields are updated each time a new measurement for the cell is added. See figure \\ref\{fig:RealDataExample\} for an example of a cell with two measurements. Table \\ref\{table:cell\} and \\ref\{table:measurement\} display the cell and measurement objects with corresponding data fields.\
\
\\begin\{figure\}[h!]\
\\centering\
\\includegraphics[scale=0.5]\{pictures/RealData-example.png\}\
\\caption\{A cell object with two measurement objects, given in JSON \\cite\{json\}.\}\
\\label\{fig:RealDataExample\}\
\\end\{figure\}\
\
\
\\begin\{table\}[h!]\
  \\center\
  \\begin\{tabularx\}\{\\textwidth\}\{|l|X|\}\
    \\hline\
    \\cellcolor[gray]\{0.9\}Data field&\\cellcolor[gray]\{0.9\}Description\\\\\\hline\
    radio & Network type. Either GSM, UMTS, LTE or CDMA. \\\\\\hline\
    mcc & Mobile Country Code. \\\\\\hline\
    net & Mobile Network Code (MNC) for GSM, UMTS and LTE.\\newline System IDentification number (SID) for CDMA. \\\\\\hline\
    area & Location Area Code (LAC) for GSM and UMTS.\\newline Tracking Area Code (TAC) for LTE.\\newline Network IDentification number (NID) for CDMA. \\\\\\hline\
    cell & Cell ID (CID) for GSM and LTE.\\newline UTRAN Cell ID/LCID for UMTS.\\newline Base station IDentifier number (BID) for CDMA. \\\\\\hline\
    unit & Primary Scrambling Code (PSC) for UMTS.\\newline Physichal Cell ID (PCI) for LTE.\\newline Empty for GSM and CDMA. \\\\\\hline\
    lon & Longitude in degrees between -180.0 and 180.0. \\\\\\hline\
    lat & Latitude in degrees between -90.0 and 90.0. \\\\\\hline\
    range & Estimated cell range, in meters. \\\\\\hline\
    samples & Total number of the cell's measurements. \\\\\\hline\
    changeable & If 1: The lon,lat values have been calculated from available measurements.\\newline If 0: The lon,lat values are correct - no measurements have been used to calculate it. \\\\\\hline\
    created & The first time the cell was seen and added to the database. \\\\\\hline\
    updated & The last time the cell was seen, and thus updated. \\\\\\hline\
    averageSignal & Average signal strength for all the cell's measurements. \\\\\\hline\
  \\end\{tabularx\}\
  \\caption\{Overview of the OpenCellID Cell object, as defined at \\cite\{opencellid\}.\}\
  \\label\{table:cell\}\
\\end\{table\}\
\
\\begin\{table\}[h!]\
  \\center\
  \\begin\{tabularx\}\{\\textwidth\}\{|l|X|\}\
    \\hline\
    \\cellcolor[gray]\{0.9\}Data field&\\cellcolor[gray]\{0.9\}Description\\\\\\hline\
    mcc & Mobile Country Code. \\\\\\hline\
    net & Mobile Network Code (MNC) for GSM, UMTS and LTE.\\newline System IDentification number (SID) for CDMA. \\\\\\hline\
    area & Location Area Code (LAC) for GSM and UMTS.\\newline Tracking Area Code (TAC) for LTE.\\newline Network IDentification number (NID) for CDMA. \\\\\\hline\
    cell & Cell ID (CID) for GSM and LTE.\\newline UTRAN Cell ID/LCID for UMTS.\\newline Base station IDentifier number (BID) for CDMA. \\\\\\hline\
    lon & Longitude in degrees between -180.0 and 180.0. \\\\\\hline\
    lat & Latitude in degrees between -90.0 and 90.0. \\\\\\hline\
    signal & Signal level in dBm or as defined in \\cite[section 8.5]\{TS127007\}. \\\\\\hline\
    measured & When the measurement was registered. \\\\\\hline\
    created & When the measurement was added to the database. \\\\\\hline\
    rating & GPS quality/accuracy information in metres. \\\\\\hline\
    speed & Speed of the phone when the measurement was registered. \\\\\\hline\
    direction & Heading direction of the phone when the measurement was registered. \\\\\\hline\
    radio & Network type. Either GSM, UMTS, LTE or CDMA. \\\\\\hline\
    ta & Timing advance; only for GSM and LTE. \\\\\\hline\
    rnc & Radio Network Controller; only for UMTS. \\\\\\hline\
    cid & Cell ID (short); only for UMTS. \\\\\\hline\
    psc & Primary Scrambling Code; only for UMTS. \\\\\\hline\
    tac & Tracking Area Code; only for LTE. \\\\\\hline\
    pci & Physical Cell ID; only for LTE. \\\\\\hline\
    sid & System Identifier; only for CDMA. \\\\\\hline\
    nid & Network Identifier; only for CDMA. \\\\\\hline\
    bid & Base station ID; only for CDMA. \\\\\\hline\
  \\end\{tabularx\}\
  \\caption\{Overview of the OpenCellID Measurement object, as defined at \\cite\{opencellid\}.\}\
  \\label\{table:measurement\}\
\\end\{table\}\
\
\\section\{Overview of the Data\}\
As we can see from table \\ref\{table:cell\} and \\ref\{table:measurement\}, both cells and measurements contain several data fields. To us, they are not all relevant. \
\
\\paragraph\{Identification\}\
A cell is identified with four different values; \\textit\{mcc\}, \\textit\{net\}, \\textit\{area\} and \\textit\{cell\}. These tell us which country, which cellular network provider, the area within that country, and which ID belongs to the cell, respectively. Both cell and measurement objects have these four data fields. Each measurement belonging to a cell will have the same identification values. The only way to tell two measurements apart is by comparing for example \\textit\{longitude\} and \\textit\{latitude\} values, or \\textit\{created\} values. On the other hand, we never need to target one measurement individually. We are always iterating over a set of measurements. The longitude and latitude values of the measurements will clearly be very important to us when estimating cell tower locations.\
\
\\paragraph\{Known Correct Cell Tower Locations\}\
As mentioned in section \\ref\{sect:motivation\}, OpenCellID estimates the cell tower location for a cell by calculating the mean of the longitudes and latitudes of the cell's measurements. But there are some exceptions. The \\textit\{changeable\} data field tells us whether the cell tower location has already been computed using available measurements or not. If the changeable value is 0, the location given for the cell tower is correct. In this case OpenCellID has been given access to data about correct cell tower locations from certain cellular network providers in certain countries. The countries this concerns is Russia, Germany and Poland. We learned this by writing a piece of code that iterates over every cell in the OpenCellID database, checks the changeable value for ever cell, and stores the mcc value of every cell where this value is 0. Among the stored mcc values were only the ones for Russia, Germany and Poland. To know that certain cells contain the correct location of the cell tower will be very valuable to us when testing the D-CTL and RSS-CTL algorithms. This lets us compare our estimated cell tower locations to the correct cell tower locations so we can know to which degree the algorithms work.\
\
\\subsection\{Filtering the Data\}\
\
We need a strategy for how to create subsets of the OpenCellID data to test the D-CTL and RSS-CTL algorithms on. As of January 2015, their database contained almost 7 million unique cell towers and 1.2 Billion crowdsourced measurements. This means we must rule out parts of the data we do not need, thus narrowing down to what we do need. When we have traversed the pieces of the downloadable database and found the cells we want to use, we will download their corresponding measurements through HTTP GET.\
\
\\paragraph\{GSM\}\
To test D-CTL and RSS-CTL we need to choose subsets from the database to test them on. Considering the \\textit\{radio\} data field is a good first step. This field tells us if a cell uses either the GSM, UMTS, LTE or CDMA technology to broadcast it's signal. Table \\ref\{table:radio_distribution\} shows how the entire dataset of available cells is distributed with respect to the radio data field. We learned these numbers by writing a piece of code that counts all the cells using GSM technology, counts all the cells using UMTS technology, and so on. As we can see from table \\ref\{table:radio_distribution\}, the OpenCellID database contains most cells that uses GSM technology. Since we have no deep knowledge about the data, we conclude that this type of cell is the most favorable type to test the D-CTL and RSS-CTL algorithms on.\
\
\\begin\{table\}[h!]\
  \\center\
  \\begin\{tabular\}\{|l|l|\}\
    \\hline\
    \\cellcolor[gray]\{0.9\}radio&\\cellcolor[gray]\{0.9\}Number of cells\\\\\\hline\
    GSM & 4,098,870 \\\\\\hline\
    UMTS & 3,342,507 \\\\\\hline\
    LTE & 32,782 \\\\\\hline\
    CDMA & 30,016 \\\\\\hline \\hline\
    \\textbf\{Total\} & \\textbf\{7,504,176\} \\\\\\hline\
  \\end\{tabular\}\
  \\caption\{Distribution of OpenCellID cells over broadcasting technology.\}\
  \\label\{table:radio_distribution\}\
\\end\{table\}\
\
\\paragraph\{Known Correct Cell Tower Locations\}\
We are also interested in cells where the data field changeable has the value 0, since these cell tower locations are correct. We wrote a piece of code that found the distribution of GSM cells, whose changeable values are 0, over the three countries Russia, Germany and Poland. The distribution is displayed in table \\ref\{table:exact_GSM_distribution\}. \
\
\\begin\{table\}[h!]\
  \\center\
  \\begin\{tabular\}\{|l|l|\}\
    \\hline\
    \\cellcolor[gray]\{0.9\}Country&\\cellcolor[gray]\{0.9\}Number of cells\\\\\\hline\
    Russia & 48,444 \\\\\\hline\
    Germany & 41,374 \\\\\\hline\
    Poland & 235,121 \\\\\\hline \\hline\
    \\textbf\{Total\} & \\textbf\{324,939\} \\\\\\hline\
  \\end\{tabular\}\
  \\caption\{Distribution of OpenCellID GSM cells per country whose changeable values are 0.\}\
  \\label\{table:exact_GSM_distribution\}\
\\end\{table\}\
\
\\paragraph\{Measurements per Cell\}\
\\label\{sect:fetchingData\}\
Each cell object has a \\textit\{sample\} field. We will use this when downloading cells through HTTP GET. This field gives us control over the amount of measurements each cell has, and we can adjust our subsets of test cells accordingly by configuring the parameters in the HTTP GET requests. When choosing the subsets to test the D-CTL and RSS-CTL algorithms on we keep a similar tactic as when we tested them on generated data in chapter \\ref\{chapt:D-CTL\} and \\ref\{chapt:RSS-CTL\}. We want to see how they perform when different amounts of measurements are available per cell. One problem arised when downloading data by performing HTTP GET requests. The sample values of the cells in the downloadable pieces of the database were in many cases not equal to the actual number of measurements available when performing HTTP GET requests. For example, if a cell in the downloadable database had the sample value 100, the actual amount of available measurements for that cell when requesting them through HTTP was 500. This made it difficult to request cells with the intended amount of measurements. In addition to this, the maximum number of measurements that can be retrieved for a cell thrugh HTTP is 1000. When we request measurements for a cell that has more than 1000, we get back 1000 randomly chosen measurements.\
\
\\subsection\{Cleaning Up and Validating the Data\}\
\\label\{sect:cleaning\}\
Before we use D-CTL and RSS-CTL on the data we need to clean it up due to the fact that the OpenCellID database contains a lot of bad measurements. When each measurement for a cell has been through the clean-up process we will also validate the complete cell to ensure it has the correct properties.\
\
\\paragraph\{$r_\{include\}$ Validates Distance from Measurement to Cell Tower\}\
We look at the location of where the measurement was registered. A cell tower cannot broadcast infinitely far, and some measurements are too far away from the cell it belongs to for it to be valid. See for an example figure \\ref\{fig:badMeasurementLocation\}. That is why we re-introduce the parameter $r_\{include\}$. If a measurement is further away from the correct cell tower location than the value of $r_\{include\}$, we do not include it when running the D-CTL and RSS-CTL algorithms. When we do not know the correct cell tower location, we calculate the mean of the measurements' longitudes and latitudes, and use this geometric center of the measurements as origo for $r_\{include\}$. Macro-cell is the type of cell with the strongest broadcasting capabilities. The standard theoretical range for the macro-cell is 35 kilometers \\cite\{maxRange\}. We use this distance as a maximum $r_\{include\}$ value when validating a measurement's distance to it's cell tower. We will also experiment with lower limits of this parameter.\
\
\\begin\{figure\}[h!]\
\\centering\
\\includegraphics[scale=0.6]\{pictures/realCell_badMeasLocation.png\}\
\\caption\{A cell in Poland with one measurement in Libya\}\
\\label\{fig:badMeasurementLocation\}\
\\end\{figure\}\
\
\\paragraph\{Received Signal Strength\}\
We need to validate each measurement's RSS. As described in table \\ref\{table:measurement\}, the RSS of a measurement is in either dBm or a number between 0 and 31 (both included) as defined in \\cite[section 8.5]\{TS127007\}. The dBm value of cell signals are always negative. \\cite[section 8.5]\{TS127007\} defines a mapping from the negative dBm values to positive numbers. See table \\ref\{table:signalStrengthMapping\}. As we can see from this table, RSS can have the positive values 0 to 31 in addition to negative dBm values. Measurements with RSS values larger than 31 will not be considered valid. When running the D-CTL and RSS-CTL algorithms on cells that have measurements with RSS values from 0 to 31, we translate these to dBm values. The formula is simple. If $x$ is a positive RSS value not smaller than 0 and not larger than 31, the dBm value of $x$ can be calculated like this: $(2\\times x)-113$.\
\
\\begin\{table\}[h!]\
  \\center\
  \\begin\{tabular\}\{|c|c|\}\
    \\hline\
    \\cellcolor[gray]\{0.9\}\\cite[section 8.5]\{TS127007\}&\\cellcolor[gray]\{0.9\}dBm\\\\\\hline\
    0 & -113 dBm or less \\\\\\hline\
    1 & -111 dBm \\\\\\hline\
    2...30 & -109...-53 dBm \\\\\\hline\
    31 & -51 dBm or greater \\\\\\hline\
    99 & not known or not detectable \\\\\\hline\
  \\end\{tabular\}\
  \\caption\{Received Signal Strength comes in two formats. Here is the mapping between them.\}\
  \\label\{table:signalStrengthMapping\}\
\\end\{table\}\
\
\
\\paragraph\{Received Signal Strength Values among a Cell's Measurements\}\
We need to consider the total number of different RSS values among every measurement belonging to a cell. If we are using RSS-CTL to compute an estimated cell tower location, we need at least two different RSS values among the measurements. See algorithm \\ref\{alg:RSS-DL\}. Since the pairing of measurements in RSS-CTL is done randomly we may need more than two different RSS values, especially when $n$ is small. That is why we use 3 as a threshold when validating the number of RSS values among a cell's measurements. \
\
\\paragraph\{$m_\{min\}$ and $m_\{max\}$\}\
We want to control the number of measurements per cell when estimating cell tower locations. That is why we operate with a minimum number $m_\{min\}$ and maximum number $m_\{max\}$ of measurements per cell when runing D-CTL and RSS-CTL on a set of cells.\
\
\\subsubsection\{Notations Intruduced in This Section:\}\
\\begin\{description\}\
\\item[$m_\{min\}$,$m_\{max\}$:] The minimum and maximum number of measurements per cell when runing D-CTL and RSS-CTL on a set of cells.\
\\end\{description\}\
\
\\section\{Test Data: Cells where Correct Cell Tower Locations are Known\}\
\\label\{label:correctCells\}\
For our test data of cells with correct cell tower locations, we downloaded 2036 of the 324,939 cells described in table \\ref\{table:exact_GSM_distribution\}, including corresponding measurements. We form the set $S_\{correct\}$ with these 2036 cells. The amount of measurements per cell ranges from approximately 70 to 1000.\
\
We now summarize the validation procedure for a cell $\\in S_\{correct\}$. For each measurement belonging to the cell, it is approved if the following two properties hold:\
\\begin\{itemize\}\
\\item the distance to the correct cell tower location is less than or equal to $r_\{include\}$.\
\\item the RSS value is less than or equal to 31 (if it is greater than or equal to 0 and less than or equal to 31, we translate it to the corresponding dBm value).\
\\end\{itemize\}\
\
After evaluating all the measurements belonging to the cell, the cell is approved if the following two properties hold:\
\\begin\{itemize\}\
\\item the total number of different RSS values among the measurements is greater than or equal to 3.\
\\item the total number of measurements is not less than $m_\{min\}$ and not greater than $m_\{max\}$.\
\\end\{itemize\}\
\
\\subsubsection\{Notations Intruduced in This Section:\}\
\\begin\{description\}\
\\item[$S_\{correct\}$:] A set containing 2036 random real cells with correct cell tower locations.\
\\end\{description\}\
\
\\section\{Test Data: Cells where Correct Cell Tower Locations are Not Known - Bergen City Center\}\
\\label\{sect:validationBergen\}\
\
We want to estimate cell tower locations for a familiar area. To accomplish this task it was very natural for us to choose the Bergen City Center. To locate the cells corresponding to this area, we had to decide minimum and maximum longitude and latitude values, thereby creating a square around the Bergen City Center. Then we traversed all of the cells in the OpenCellID database, and located the ones within the square area. We tried to find a way to narrow down the Bergen City Center cells by using the \\textit\{area\} data field. See table \\ref\{table:cell\}. According to various blogposts, the different cellular network providers use different area code schemes, and usually do not publish these. In addition, the area codes change regularly. Thus we could not use the area data field to accomplish this.\
\
The area confined within the square area resulted in 597 cells, with corresponding measurements. We form the set $S_\{bergen\}$ with these cells. The amount of measurements per cell ranges from 1 to 1000. We use almost the same validation procedure as for correct cells in section \\ref\{label:correctCells\}.\
\
We now summarize the validation procedure for a cell $\\in S_\{bergen\}$. For each measurement belonging to the cell, it is approved if the following two properties hold:\
\\begin\{itemize\}\
\\item the distance to the geometric center of all measurements is less than or equal to $r_\{include\}$.\
\\item the RSS value is less than or equal to 31 (if it is greater than or equal to 0 and less than or equal to 31, we translate it to the corresponding dBm value).\
\\end\{itemize\}\
\
After evaluating all the measurements belonging to the cell, the cell is approved if the following two properties hold:\
\\begin\{itemize\}\
\\item the total number of different RSS values among the measurements is greater than or equal to 3.\
\\item the total number of measurements is not less than 10 (D-CTL and RSS-CTL need a minimum amount of measurements to work properly).\
\\end\{itemize\}\
\
%st\'f8rrelse bergen set: 597\
%cells i bergen set med minst 10 measurements: 242\
%validation procedure resulterer i 120 bergen cells\
\
\\subsubsection\{Notations Intruduced in This Section:\}\
\\begin\{description\}\
\\item[$S_\{bergen\}$:] A set containing 597 real cells located in the Bergen City Center.\
\\end\{description\}\
\
\
\\section\{Chapter Review\}\
In this chapter we have described the real cell and measurement data provided by OpenCellID. We have discussed the process of how to retrieve it from OpenCellID's database, and what we must do with it before actually using it to test the D-CTL and RSS-CTL algorithms. The entire database is large, complex, and has many flaws. Understanding it's complexity and problems was very time-consuming.\
\
\
\\chapter\{Running the D-CTL and RSS-CTL Algorithms on OpenCellID Data\}\
\\label\{chap:results\}\
We will now estimate cell tower locations of real cells by using D-CTL and RSS-CTL on the OpenCellID data subsets $S_\{correct\}$ and $S_\{bergen\}$. We define the following two primary goals for this chapter:\
\\begin\{enumerate\}\
\\item With the cells in $S_\{correct\}$, we want to test the accuracy of our two algorithms by comparing their estimated cell tower locations to the correct ones.\
\\item With the cells in $S_\{bergen\}$, we want to propose new estimated cell tower locations as alternatives to the existing suggested cell tower locations.\
\\end\{enumerate\}\
\
Even though we made strong arguments that RSS-CTL results in more accurate results than D-CTL in chapter \\ref\{chapt:RSS-CTL\}, we still want to run D-CTL on real cells as this algorithm can be an alternative if RSS is not available in the measurements. We remind the reader that an overview and description of D-CTL and corresponding sub-routines can be found in table \\ref\{table:D-CTL\} and \\ref\{table:subRoutines_D-CTL\}. An overview and description of RSS-CTL and corresponding sub-routines can be found in table \\ref\{table:RSS-CTL\} and \\ref\{table:subRoutines_RSS-CTL\}.\
\
We will compare the performance of our two algorithms with the algorithm currently used by OpenCellID. This computes a cell tower location by calculating the mean of the longitudes and latitudes of the cells' measurements. As we discussed in section \\ref\{sect:motivation\} this approach is no good as the estimated cell tower will be located in the middle of the measurements. The cell tower should be located so that each measurement lies to some direction of the cell tower within a $120^\{\\circ\}$ cell sector, as described in figure \\ref\{figure:sector\}. That is why we also will calculate the maximum number of a cell's measurements that can be fit within a $120^\{\\circ\}$ cell sector, when the cell tower location is estimated with the approach currently used by OpenCellID. When we show results we will provide the average percentage $M_\{miss\}$ of the number of measurements that could not be fit within a $120^\{\\circ\}$ cell sector. The D-CTL and RSS-CTL algorithms are designed so that $M_\{miss\}$ always is 0\\%.\
\
\\subsubsection\{Notations Intruduced in This Section:\}\
\\begin\{description\}\
\\item[$M_\{miss\}$:] The average percentage of the number of measurements that could not be fit within a $120^\{\\circ\}$ cell sector, for multiple cells.\
\\end\{description\}\
\
%\\section\{Average Error Values\}\
%When we tested the D-CTL and RSS-CTL algorithms on generated test data in chapter \\ref\{chapt:developing\}, we measured the accuracy of the algorithms by calculating the distance from the estimated cell tower location to the correct cell tower location. We called this distance the \\textit\{error\}. When running the algorithms on multiple cells, we calculated the average distance from the estimated cell tower locations to the correct cell tower locations. We called this the \\textit\{average error\}. We will also use these terms when running our algorithms on real data. Error and average error only apply when we know the correct cell tower location.\
\
%We will compute estimated cell tower locations for real cells, with three different algorithms: D-CTL, RSS-CTL, and the algorithm currently used by OpenCellID. We will calculate $M_\{miss\}$ and average error values for all three algorithms. To tell the average error values apart we introduce the following notations. In addition we properly define $M_\{miss\}$.\
\
%\\paragraph\{$error_\{D\}$\}\
%This is the average error of the D-CTL algorithm. \
\
%\\paragraph\{$error_\{RSS\}$\}\
%This is the average error of the RSS-CTL algorithm. \
\
%\\paragraph\{$error_\{mean\}$\}\
%This is the average error of the algorithm currently used by OpenCellID. This estimated a cell tower location by calculating the mean of the longitudes and latitudes of the cells' measurements.\
\
%\\paragraph\{$M_\{miss\}$\}\
%This is the average percentage of the number of measurements that could not be fit within a $120^\{\\circ\}$ cell sector, when computing the cell tower location with the algorithm currently used by OpenCellID.\
\
\\section\{Parameters\}\
\\label\{sect:parameters\}\
There are several parameters we wish to scale when running D-CTL and RSS-CTL. These are the same paremeters we experimented with in chapter \\ref\{chapt:D-CTL\} and \\ref\{chapt:RSS-CTL\}.\
\
\\paragraph\{$n$\}\
In the sub-routines D-DL, D-CD, RSS-DL and RSS-CD, $n$ plays important roles. See table \\ref\{table:subRoutines_D-CTL\} and \\ref\{table:subRoutines_RSS-CTL\}. When running D-CTL and RSS-CTL we want to learn if small values of $n$ result in as accurate estimated cell tower locations as large values of $n$.\
\
\\paragraph\{$d_\{extend\}$\}\
In the sub-routine FS, $l_\{direction\}$ is extended by a distance $d_\{extend\}$ until every measurement of a cell fits within the cell sector. When running D-CTL and RSS-CTL we want to learn if large values of $d_\{extend\}$ result in as accurate estimated cell tower locations as small values of $d_\{extend\}$. When estimating cell tower locations for real cells, the values of $d_\{extend\}$ are much lower than when we estimated cell tower locations for generated cells in chapter \\ref\{chapt:D-CTL\} and \\ref\{chapt:RSS-CTL\}. The reason for this is the difference between a Cartesian coordinate system and longitude/latitude coordinates. For example, in a Cartesian coordinate system 0.001 is a very small distance, but in longitude/latitude coordinates it is 111.2 meters.\
\
\\paragraph\{$r_\{include\}$\}\
When validating measurements, we decline those that are further away than $r_\{include\}$ kilometers. See section \\ref\{sect:cleaning\}. When running the D-CTL, RSS-CTL and OpenCellID algorithms we want to learn if using small values of $r_\{include\}$ result in more accurate estimated cell tower locations than using large values of $r_\{include\}$. Even though measurements far away from the correct cell tower location are completely valid, we want to exclude them from the computations to see how that affects the errors of estimated cell tower locations.\
\
\\paragraph\{$m_\{min\}$ and $m_\{max\}$\}\
When running the D-CTL, RSS-CTL and OpenCellID algorithms on real cells we want to learn if the accuracy of estimated cell tower locations differs when the cells have different amounts of measurements. See section \\ref\{sect:cleaning\}. If $m_\{min\}=100$ and $m_\{max\}=200$, we run the D-CTL, RSS-CTL and OpenCellID algorithms on cells that have not less than  $m_\{min\}$ and not more than $m_\{max\}$ measurements. In section \\ref\{sect:constant_d_r\}, \\ref\{section:scalingD_timing\} and \\ref\{sect:scalingROnRealCells\} we experiment with the set of real cells $S_\{correct\}$. In these sections we will use the following values of $m_\{min\}$ and $m_\{max\}$: $m_\{min\}=100$/$m_\{max\}=200$, $m_\{min\}=450$/$m_\{max\}=550$ and $m_\{min\}=900$/$m_\{max\}=1000$. In section \\ref\{sect:testingOnBergen\} we experiment with the set of real cells $S_\{bergen\}$. In this section we will estimate cell tower locations for each cell in the set that has not less than 10 measurements. This means we use $m_\{min\}=10$/$m_\{max\}=100$.\
\
\\section\{The Haversin Formula\}\
%bruker n\'e5r vi genererer error og for \'e5 utelukke measurements\
Our planet has the shape of a sphere. To calculate distances from one point to another on the surface of a sphere, we need a bit more complex formula than the one we use with a regular Cartesion coordinate system. We will use the Haversin Formula \\cite[page 161]\{haversine\}:\
\
\\begin\{center\}\
$\\operatorname\{haversin\}(\\frac\{d\}\{r\})=\\operatorname\{haversin\}(\\phi_2 - \\phi_1)+\\cos (\\phi_1)\\cos (\\phi_2)\\operatorname\{haversin\}(\\lambda_2 - \\lambda_1)$\
\\end\{center\}\
where\
\\begin\{itemize\}\
\\item \\textit\{haversin\} is the haversin function: $\\operatorname\{haversin\}(\\theta)=\\sin^2(\\frac\{\\theta\}\{2\})=\\frac\{1-\\cos(\\theta)\}\{2\}$,\
\\item \\textbf\{\\textit\{d\} is the distance between the two points,\}\
\\item \\textit\{r\} is the radius of the sphere,\
\\item $\\phi_1$ and $\\phi_2$ is the latitude of point 1 and latitude of point 2, and\
\\item $\\lambda_1$ and $\\lambda_2$ is the longitude of point 1 and longitude of point 2\
\\end\{itemize\}\
\
We will not incorporate this directly into the D-CTL and RSS-CTL algorithms. When running the two algorithms on real cells we are imagining that we are dealing with a flat surface. But we will use this formula when calculating the errors and when excluding measurements with respect to $r_\{include\}$.\
\
\\section\{Testing on Cells where Correct Locations are Known: Constant $d_\{extend\}$ and $r_\{include\}$\}\
%\\section\{Testing on Cells where the Correct Cell Tower Locations are Known: Constant $d_\{extend\}$ and $r_\{include\}$\}\
\\label\{sect:constant_d_r\}\
\
In this section we test our algorithms on cells where the correct cell tower locations are known. The purpose of these tests are to measure the accuracy of the estimated cell tower locations by comparing them to the correct locations. We keep $d_\{extend\}$ and $r_\{include\}$ constant to get an understanding of how only different values of $n$ affect the accuracy of the estimated cell tower locations. We will experiment with these parameters in section \\ref\{section:scalingD_timing\} and \\ref\{sect:scalingROnRealCells\}. \
\
We run and compare the D-CTL, RSS-CTL and OpenCellID algorithms on $S_\{correct\}$. We use the following consant parameters:\
\\begin\{itemize\}\
\\item $d_\{extend\} = 0.001$\
\\item $r_\{include\} = 35$km\
\\end\{itemize\}\
\
%\\subsection\{$m_\{min\} = 100$ and $m_\{max\} = 200$\}\
\\begin\{table\}[h!]\
  \\centering\
  \\begin\{subtable\}[h!]\{0.45\\textwidth\}\
  \\centering\
  \\begin\{tabular\}\{|a|c|c|\}\
    \\hline\
    \\cellcolor[gray]\{0.9\}$n$&\\cellcolor[gray]\{0.9\}D-CTL&\\cellcolor[gray]\{0.9\}RSS-CTL\\\\\\hline\
    10 & 7.9km & 4.7km \\\\\\hline\
    20 & 8.1km & 4.0km \\\\\\hline\
    40 & 7.8km & 3.8km \\\\\\hline\
    80 & 7.6km & 3.9km \\\\\\hline\
  \\end\{tabular\}\
  \\caption\{Overview of average errors when running the D-CTL and RSS-CTL algorithms.\}\
  \\label\{table:errors_exact_100/200_process\}\
  \\end\{subtable\}\
  \\hfill\
  \\begin\{subtable\}[h]\{0.45\\textwidth\}\
  \\centering\
  \\begin\{tabular\}\{|c|c|\}\
    \\hline\
    \\cellcolor[gray]\{0.9\}OpenCellID&\\cellcolor[gray]\{0.9\}$M_\{miss\}$\\\\\\hline\
    2.8km & 38.9\\%\\\\\\hline\
  \\end\{tabular\}\
  \\caption\{Overview of average error and $M_\{miss\}$ when running the OpenCellID algorithm.\}\
  \\label\{table:errors_exact_100/200_averaging\}\
  \\end\{subtable\}\
  \\caption\{Overview of average errors of estimated cell tower locations of cells in $S_\{correct\}$ when $m_\{min\} = 100$ and $m_\{max\} = 200$. These $m_\{min\}$ and $m_\{max\}$ values amounted to 241 cells.\}\
  \\label\{table:errors_exact_100/200\}\
\\end\{table\}\
\
%As we can see from table \\ref\{table:errors_exact_100/200_process\} and \\ref\{table:errors_exact_100/200_averaging\}, the OpenCellID algorithm produces the lowest average error. $M_\{miss\}$ tells us that this algorithm estimated cell tower locations that on average will not cover 38.9\\% of the measurements.\
\
 \
%\\subsection\{$m_\{min\} = 450$ and $m_\{max\} = 550$\}\
\
\\begin\{table\}[h!]\
  \\centering\
  \\begin\{subtable\}[h!]\{0.45\\textwidth\}\
  \\centering\
  \\begin\{tabular\}\{|a|c|c|\}\
    \\hline\
    \\cellcolor[gray]\{0.9\}$n$&\\cellcolor[gray]\{0.9\}D-CTL&\\cellcolor[gray]\{0.9\}RSS-CTL\\\\\\hline\
    10 & 13.8km & 10.1km \\\\\\hline\
    20 & 14,3km & 9.9km \\\\\\hline\
    40 & 14.5km & 9.7km \\\\\\hline\
    80 & 14.2km & 9.7km \\\\\\hline\
    160 & 13.5km & 9.8km \\\\\\hline\
    320 & 13.2km & 9.8km \\\\\\hline\
  \\end\{tabular\}\
  \\caption\{Overview of average errors when running the D-CTL and RSS-CTL algorithms.\}\
  \\label\{table:errors_exact_450/550_process\}\
  \\end\{subtable\}\
  \\hfill\
  \\begin\{subtable\}[h!]\{0.45\\textwidth\}\
  \\centering\
  \\begin\{tabular\}\{|c|c|\}\
    \\hline\
    \\cellcolor[gray]\{0.9\}OpenCellID&\\cellcolor[gray]\{0.9\}$M_\{miss\}$\\\\\\hline\
    2.2km & 39.4\\% \\\\\\hline\
  \\end\{tabular\}\
  \\caption\{Overview of average error and $M_\{miss\}$ when running the OpenCellID algorithm.\}\
  \\label\{table:errors_exact_450/550_averaging\}\
  \\end\{subtable\}\
  \\caption\{Overview of average errors of estimating cell tower locations of cells in $S_\{correct\}$ when $m_\{min\} = 450$ and $m_\{max\} = 550$. These $m_\{min\}$ and $m_\{max\}$ values amounted to 266 cells.\}\
  \\label\{table:errors_exact_450/550\}\
\\end\{table\}\
\
%As we can see from table \\ref\{table:errors_exact_450/550_process\} and \\ref\{table:errors_exact_450/550_averaging\}, the average errors are overall higher. But the relations between the the average errors from D-CTL, RSS-CTL and OpenCellID are the same as in table \\ref\{table:errors_exact_100/200_process\} and \\ref\{table:errors_exact_100/200_averaging\}.\
\
\
\
%\\subsection\{$m_\{min\} = 900$ and $m_\{max\} = 1000$\}\
\
\\begin\{table\}[h!]\
  \\centering\
  \\begin\{subtable\}[h!]\{0.45\\textwidth\}\
  \\centering\
  \\begin\{tabular\}\{|a|c|c|\}\
    \\hline\
    \\cellcolor[gray]\{0.9\}$n$&\\cellcolor[gray]\{0.9\}D-CTL&\\cellcolor[gray]\{0.9\}RSS-CTL\\\\\\hline\
    10 & 16.4km & 13.3km \\\\\\hline\
    20 & 17.3km & 13.0km \\\\\\hline\
    40 & 17.6km & 12.7km \\\\\\hline\
    80 & 17.2km & 12.7km \\\\\\hline\
    160 & 16.6km & 12.7km \\\\\\hline\
    320 & 16.1km & 12.8km \\\\\\hline\
    640 & 15.8km & 13.2km \\\\\\hline\
  \\end\{tabular\}\
  \\caption\{Overview of average errors when running the D-CTL and RSS-CTL algorithms.\}\
  \\label\{table:errors_exact_900/1000_process\}\
  \\end\{subtable\}\
  \\hfill\
  \\begin\{subtable\}[h!]\{0.45\\textwidth\}\
  \\centering\
  \\begin\{tabular\}\{|c|c|\}\
    \\hline\
    \\cellcolor[gray]\{0.9\}OpenCellID&\\cellcolor[gray]\{0.9\}$M_\{miss\}$\\\\\\hline\
    2.7km & 37.7\\% \\\\\\hline\
  \\end\{tabular\}\
  \\caption\{Overview of average error and $M_\{miss\}$ when running the OpenCellID algorithm.\}\
  \\label\{table:errors_exact_900/1000_averaging\}\
  \\end\{subtable\}\
  \\caption\{Overview of average errors of estimated cell tower locations of cells in $S_\{correct\}$ when $m_\{min\} = 900$ and $m_\{max\} = 1000$. These $m_\{min\}$ and $m_\{max\}$ values amounted to 308 cells.\}\
  \\label\{table:errors_exact_900/1000\}\
\\end\{table\}\
\
%As we can see from table \\ref\{table:errors_exact_900/1000_process\} and \\ref\{table:errors_exact_900/1000_averaging\}, the average errors are overall higher. But the relations between the the average errors from D-CTL, RSS-CTL and OpenCellID are the same as in table \\ref\{table:errors_exact_100/200_process\} and \\ref\{table:errors_exact_100/200_averaging\}, and \\ref\{table:errors_exact_450/550_process\} and \\ref\{table:errors_exact_450/550_averaging\}.\
\
\
\\subsubsection\{Analysis\}\
The OpenCellID algorithm has the lowest average error for all three $m_\{min\}$/$m_\{max\}$ intervals. See table \\ref\{table:errors_exact_100/200\}, \\ref\{table:errors_exact_450/550\} and \\ref\{table:errors_exact_900/1000\}. The $M_\{miss\}$ values tells us that this algorithm estimated cell tower locations that on average will not cover 38.9\\%, 39.4\\% and 37.7\\%, respectively.\
\
As we can see there is a clear gap between the average error values of D-CTL and RSS-CTL. We can also see that the average errors increase when the amount of measurements per cell increases. This confirms our results from running the two algorithms on generated test data in chapter \\ref\{chapt:D-CTL\} and \\ref\{chapt:RSS-CTL\}. \
\
There are no strong correlation between the value of $n$ and average error values of  D-CTL, or $n$ and average error values of RSS-CTL. In table \\ref\{table:errors_exact_100/200_process\}, \\ref\{table:errors_exact_450/550_process\} and \\ref\{table:errors_exact_900/1000_process\}, the average errors for both D-CTL and RSS-CTL change very little with respect to the different values of $n$. There seems to be no pattern to predict whether the average error values will increase or decrease when scaling $n$. Though we might argue that both D-CTL and RSS-CTL have slightly lower average errors at maximum $n$ than minimum $n$.\
\
These unpredictable average error values from D-CTL and RSS-CTL tells us several things. First, our randomization procedure when computing $l_\{direction\}$ in algorithm \\ref\{alg:D-DL\} and \\ref\{alg:RSS-DL\} works. Even with a low $n$ and a large amount of measurements per cell, the algorithms manage to compute viable direction lines. We can see this by looking at the small and unpredictable changes in average error as $n$ increases. If the randomization procedure did not work, we would expect the average errors to be much higher for small values of $n$ than for large values of $n$. Secondly, the average error values increase when $m_\{min\}$ and $m_\{max\}$ increase. This means that a larger number of measurements per cell results in larger error values. This again means that, on average, a cell with a large amount of measurements has them spread out on a larger area than a cell with a smaller amount of measurements. This conclusion is based on how much algorithm \\ref\{alg:FS\} has to extend $l_\{direction\}$ to be able to compute a cell sector every measurement will fit within.\
\
The average error from the OpenCellID algorithm is also unpredictable as it decreases from table \\ref\{table:errors_exact_100/200_averaging\} to table \\ref\{table:errors_exact_450/550_averaging\}, but increases from table \\ref\{table:errors_exact_450/550_averaging\} to table \\ref\{table:errors_exact_900/1000_averaging\}. \
\
This unpredictability for all three algorithms tells us that the measurements are randomly distributed within their cells. There are no patterns explaining the distribution.\
\
\\section\{Testing on Cells where Correct Locations are Known: Scaling $d_\{extend\}$ and Measuring Time\}\
\\label\{section:scalingD_timing\}\
\
In this section we test our algorithms on cells where the correct cell tower locations are known. The purpose of these tests are to measure the accuracy of the estimated cell tower locations by comparing them to the correct locations. We will now experiment with different values of $d_\{extend\}$ to get an understanding of how this parameter affects the accuracy of the estimated cell tower locations.\
\
We run and compare the D-CTL and RSS-CTL algorithms with different values of $d_\{extend\}$, on $S_\{correct\}$. We use the following constant parameters:\
\\begin\{itemize\}\
\\item $r_\{include\} = 35$km\
\\end\{itemize\}\
Using a too small value of $d_\{extend\}$ is one of the factors that potentially can increase the time it takes to estimate a cell tower location due to the increased number of iterations in algorithm \\ref\{alg:FS\}. We experimented with and discussed $d_\{extend\}$ theoretically in section \\ref\{sect:scalingD_10deg\} and \\ref\{sect:scalingD_120deg\}. We use the following five values of $d_\{extend\}$:\
\\begin\{itemize\}\
\\item $d_\{extend\}=0.1$\
\\item $d_\{extend\}=0.01$\
\\item $d_\{extend\}=0.001$\
\\item $d_\{extend\}=0.0001$\
\\item $d_\{extend\}=0.00001$\
\\end\{itemize\}\
We will also measure the average running times for D-CTL and RSS-CTL. To narrow down the amount of average running times we have to keep track of, we focus on the worst case. That is when the average running time will be largest. In this case the worst case is when we run the two algorithms with $d_\{extend\}=0.00001$ and a large value of $n$.\
\
For the following estimations of cell tower locations we will not use the OpenCellID algorithm. The parameter $d_\{extend\}$ does not affect the cells, only the D-CTL and RSS-CTL algorithms, so the OpenCellID algorithm would produce exactly the same average errors as in section \\ref\{sect:constant_d_r\}.\
\
%\\subsection\{$m_\{min\} = 100$ and $m_\{max\} = 200$\}\
\
\\begin\{figure\}[h!]\
\\centering\
\\includegraphics[scale=0.6]\{pictures/process_100-200_35000.png\}\
\\caption\{Overview of average errors of estimated cell tower locations of cells in $S_\{correct\}$, when $m_\{min\}=100$ and $m_\{max\}=200$. These $m_\{min\}$ and $m_\{max\}$ values amounted to 241 cells.\}\
\\label\{fig:scaling-d_100/200_errors\}\
\\end\{figure\}\
\
\\begin\{table\}[h!]\
  \\center\
  \\begin\{tabular\}\{|a|c|c|\}\
    \\hline\
    \\cellcolor[gray]\{0.9\}$n$&\\cellcolor[gray]\{0.9\}D-CTL&\\cellcolor[gray]\{0.9\}RSS-CTL\\\\\\hline\
    10 & 12.1ms & 23.8ms\\\\\\hline\
    20 & 8.3ms & 24.0ms\\\\\\hline\
    40 & 5.4ms & 24.0ms\\\\\\hline\
    80 & 3.1ms & 23.2ms\\\\\\hline\
  \\end\{tabular\}\
  \\caption\{Overview of average running times for D-CTL and RSS-CTL when $d_\{extend\}=0.00001$. These are for $m_\{min\}=100$/$m_\{max\}=200$.\}\
  \\label\{table:scaling-d_100/200_time\}\
\\end\{table\}\
\
%\\subsection\{$m_\{min\} = 450$ and $m_\{max\} = 550$\}\
\
\\begin\{figure\}[h!]\
\\centering\
\\includegraphics[scale=0.6]\{pictures/process_450-550_35000.png\}\
\\caption\{Overview of average errors of estimated cell tower locations of cells in $S_\{correct\}$, when $m_\{min\}=450$ and $m_\{max\}=550$. These $m_\{min\}$ and $m_\{max\}$  values amounted to 266 cells.\}\
\\label\{fig:scaling-d_450/550_errors\}\
\\end\{figure\}\
\
\\begin\{table\}[h!]\
  \\center\
  \\begin\{tabular\}\{|a|c|c|\}\
    \\hline\
    \\cellcolor[gray]\{0.9\}$n$&\\cellcolor[gray]\{0.9\}D-CTL&\\cellcolor[gray]\{0.9\}RSS-CTL\\\\\\hline\
    10 & 87.9ms & 130.3ms\\\\\\hline\
    20 & 67.3ms & 125.9ms\\\\\\hline\
    40 & 39.7ms & 127.4ms\\\\\\hline\
    80 & 33.2ms & 129.6ms\\\\\\hline\
    160 & 25.2ms & 129.0ms\\\\\\hline\
    320 & 17.8ms & 128.3ms\\\\\\hline\
  \\end\{tabular\}\
  \\caption\{Overview of average running times for D-CTL and RSS-CTL when $d_\{extend\}=0.00001$. These are for $m_\{min\}=450$/$m_\{max\}=550$.\}\
  \\label\{table:scaling-d_450/550_time\}\
\\end\{table\}\
\
%\\subsection\{$m_\{min\} = 900$ and $m_\{max\} = 1000$\}\
\
\\begin\{figure\}[h!]\
\\centering\
\\includegraphics[scale=0.6]\{pictures/process_900-1000_35000.png\}\
\\caption\{Overview of average errors of estimated cell tower locations of cells in $S_\{correct\}$, when $m_\{min\}=900$ and $m_\{max\}=1000$. These $m_\{min\}$ and $m_\{max\}$ values amounted to 308 cells.\}\
\\label\{fig:scaling-d_900/1000_errors\}\
\\end\{figure\}\
\
\\begin\{table\}[h!]\
  \\centering\
  \\begin\{subtable\}[t]\{0.45\\textwidth\}\
  \\centering\
  \\begin\{tabular\}\{|a|c|c|\}\
    \\hline\
    \\cellcolor[gray]\{0.9\}$n \\backslash d_\{extend\}$&\\cellcolor[gray]\{0.9\}$0.00001$&\\cellcolor[gray]\{0.9\}$0.0001$\\\\\\hline\
    10 & 428.9ms & 42.0ms\\\\\\hline\
    20 & 285.8ms & 30.9ms\\\\\\hline\
    40 & 195.8ms & 20.1ms\\\\\\hline\
    80 & 146.4ms & 15.3ms\\\\\\hline\
    160 & 120.3ms & 13.4ms\\\\\\hline\
    320 & 109.9ms & 12.6ms\\\\\\hline\
    640 & 66.2ms & 17.6ms\\\\\\hline\
  \\end\{tabular\}\
  \\caption\{Average running times for D-CTL.\}\
  \\label\{table:scaling-d_900/1000_time_distance\}\
  \\end\{subtable\}\
  \\hfill\
  \\begin\{subtable\}[t]\{0.45\\textwidth\}\
  \\centering\
  \\begin\{tabular\}\{|a|c|c|\}\
    \\hline\
    \\cellcolor[gray]\{0.9\}$n \\backslash d_\{extend\}$&\\cellcolor[gray]\{0.9\}$0.00001$&\\cellcolor[gray]\{0.9\}$0.0001$\\\\\\hline\
    10 & 537.0ms & 56.3ms\\\\\\hline\
    20 & 508.5ms & 50.6ms\\\\\\hline\
    40 & 505.3ms & 51.2ms\\\\\\hline\
    80 & 526.9ms & 49.9ms\\\\\\hline\
    160 & 507.8ms & 53.0ms\\\\\\hline\
    320 & 536.8ms & 56.2ms\\\\\\hline\
    640 & 522.7ms & 63.9ms\\\\\\hline\
  \\end\{tabular\}\
  \\caption\{Average running times for RSS-CTL.\}\
  \\label\{table:scaling-d_900/1000_time_RSS\}\
  \\end\{subtable\}\
  \\caption\{Overview of average running times for D-CTL and RSS-CTL when $d_\{extend\}=0.00001$ and $d_\{extend\}=0.0001$. These are for $m_\{min\}=900$/$m_\{max\}=1000$.\}\
  \\label\{table:scaling-d_900/1000_time\}\
\\end\{table\}\
\
%Note that we have chosen to include average times for estimating cell tower locations when $d_\{extend\}=0.0001$. This is because the average times for $d_\{extend\}=0.00001$ are getting quite large. Especially for the RSS-CTL. \
\
\\subsubsection\{Analysis\}\
In the charts in figure \\ref\{fig:scaling-d_100/200_errors\}, \\ref\{fig:scaling-d_450/550_errors\} and \\ref\{fig:scaling-d_900/1000_errors\}, the average errors for $d_\{extend\}=0.01$ and $d_\{extend\}=0.00001$ is approximately equal. This means using $d_\{extend\}=0.01$ will result in just as accurate estimated cell tower locations as when using $d_\{extend\}=0.00001$. This is very relevant with regard to time constraints. We want the computation of a cell tower location to take as little time as possible, so we wish to use the largest value of $d_\{extend\}$ as possible. In table \\ref\{table:scaling-d_100/200_time\} and \\ref\{table:scaling-d_450/550_time\}, the average running times for $d_\{extend\}=0.00001$ are not large enough for us to consider using a larger value of $d_\{extend\}$. But in table \\ref\{table:scaling-d_900/1000_time_distance\} and \\ref\{table:scaling-d_900/1000_time_RSS\} the average running times for $d_\{extend\}=0.00001$ is getting high. That is why we will use $d_\{extend\}=0.0001$ for further computations of estimated cell tower locations with D-CTL and RSS-CTL. \
\
In the charts in figure \\ref\{fig:scaling-d_450/550_errors\} and \\ref\{fig:scaling-d_900/1000_errors\}, the average errors from running D-CTL are spread out more than in the chart in figure \\ref\{fig:scaling-d_100/200_errors\}, with respect to \\textit\{Error\}. We cannot see any pattern where the lowest $n$ results in the highest average error and the largest $n$ results in the lowest average error, or vice versa. This means the spread simply must be caused by the heuristic choices throughout the D-CTL and RSS-CTL algorithms.\
\
\\section\{Testing on Cells where Correct Locations are Known: Scaling $r_\{include\}$\}\
\\label\{sect:scalingROnRealCells\}\
\
In this section we test our algorithms on cells where the correct cell tower locations are known. The purpose of these tests are to measure the accuracy of the estimated cell tower locations by comparing them to the correct locations. We will now experiment with different values of $r_\{include\}$ to get an understanding of how this parameter affects the accuracy of the estimated cell tower locations.\
\
We run and compare the D-CTL, RSS-CTL and OpenCellID algorithms with different values of $r_\{include\}$, on $S_\{correct\}$. We use the following constant parameters:\
\\begin\{itemize\}\
\\item $d_\{extend\}=0.0001$\
\\end\{itemize\}\
How will the average errors look if we use values lower than 35 kilometers for $r_\{include\}$? Recall that the value of $r_\{include\}$ decides if a measurement is too far away from the correct cell tower location or not, to be included when estimating the cell tower location. Initially it was to help exclude invalid measurements as figure \\ref\{fig:badMeasurementLocation\} shows an example of. Forcing the D-CTL and RSS-CTL algorithms to exclude measurements that are valid but just far away from the cell tower, will most likely result in lower average errors. This is because algorithm \\ref\{alg:FS\} will not need to extend $l_\{direction\}$ as far to be able to fit the remaining measurements. On the other hand, the amount of available measurements to compute $l_\{direction\}$ from, in the first place, is reduced just as much. We experimented with and discussed $r_\{include\}$ theoretically in section \\ref\{sect:scalingR_10deg\} and \\ref\{sect:scalingR_120deg\}. We use the following five values of $r_\{include\}$:\
\\begin\{itemize\}\
\\item $r_\{include\}=35$km\
\\item $r_\{include\}=25$km\
\\item $r_\{include\}=15$km\
\\item $r_\{include\}=10$km\
\\item $r_\{include\}=5$km\
\\item $r_\{include\}=2$km\
\\end\{itemize\}\
We will not time these computations since we can be sure we will not exceed the running times given in section \\ref\{section:scalingD_timing\}, as we are not lowering $d_\{extend\}$.\
\
For these computations, the amount of cells used will vary for each reduction of $r_\{include\}$. This is because we are excluding more and more of each cells' measurements the lower $r_\{include\}$ gets. This means for example that a cell satisfying $m_\{min\}$ and $m_\{max\}$ at $r_\{include\}=35$ kilometers might not at $r_\{include\}=25$ kilometers. The number of cells used to compute estimated cell tower locations for each value of $r_\{include\}$ is given in parenthesis below the value of $r_\{include\}$ in the charts.\
\
Since the amount of measurements for a cell is changing when $r_\{include\}$ decreases, the average errors from running the OpenCellID algorithm is also changing. The line in the graph called \\textit\{OpenCellID\} shows the average errors from running the OpenCellID algorithm for each value of $r_\{include\}$. This also means the value of $M_\{miss\}$ changes. The values of $M_\{miss\}$ for each value of $r_\{include\}$ for all three $m_\{min\}$/$m_\{max\}$ intervals are shown in table \\ref\{table:scalingR_fit\}.\
\
\\begin\{table\}[h!]\
  \\center\
  \\begin\{tabular\}\{|a|c|c|c|\}\
    \\hline\
    \\cellcolor[gray]\{0.9\}$r_\{include\} \\backslash m_\{min\}-m_\{max\}$&\\cellcolor[gray]\{0.9\}100-200&\\cellcolor[gray]\{0.9\}450-550&\\cellcolor[gray]\{0.9\}900-1000\\\\\\hline\
    35km & 38.9\\% & 39.4\\% & 37.7\\% \\\\\\hline\
    25km & 39.2\\% & 40.0\\% & 38.6\\% \\\\\\hline\
    15km & 39.4\\% & 41.1\\% & 38.8\\% \\\\\\hline\
    10km & 39.6\\% & 42.6\\% & 38.5\\% \\\\\\hline\
    5km & 40.9\\% & 44.1\\% & 37.3\\% \\\\\\hline\
    2km & 43.1\\% & 43.8\\% & 39.5\\% \\\\\\hline\
  \\end\{tabular\}\
  \\caption\{$M_\{miss\}$ for each value of $r_\{include\}$ when $m_\{min\}=100$ and $m_\{max\}=200$, $m_\{min\}=450$ and $m_\{max\}=550$ and $m_\{min\}=900$ and $m_\{max\}=1000$.\}\
  \\label\{table:scalingR_fit\}\
\\end\{table\}\
\
%\\subsection\{$m_\{min\} = 100$ and $m_\{max\} = 200$\}\
\
\\begin\{figure\}[h!]\
\\centering\
\\includegraphics[scale=0.6]\{pictures/scalingR_100-200.png\}\
\\caption\{Overview of average errors of estimated cell tower locations of cells in $S_\{correct\}$, when $m_\{min\}=100$ and $m_\{max\}=200$.\}\
\\label\{fig:scalingR_100/200_errors\}\
\\end\{figure\}\
\
%\\subsection\{$m_\{min\} = 450$ and $m_\{max\} = 550$\}\
\
\\begin\{figure\}[h!]\
\\centering\
\\includegraphics[scale=0.6]\{pictures/scalingR_450-550.png\}\
\\caption\{Overview of average errors of estimated cell tower locations of cells in $S_\{correct\}$, when $m_\{min\}=450$ and $m_\{max\}=550$.\}\
\\label\{fig:scalingR_450/550_errors\}\
\\end\{figure\}\
\
%\\subsection\{$m_\{min\} = 900$ and $m_\{max\} = 1000$\}\
\
\\begin\{figure\}[h!]\
\\centering\
\\includegraphics[scale=0.6]\{pictures/scalingR_900-1000.png\}\
\\caption\{Overview of average errors of estimated cell tower locations of cells in $S_\{correct\}$, when $m_\{min\}=900$ and $m_\{max\}=1000$.\}\
\\label\{fig:scalingR_900/1000_errors\}\
\\end\{figure\}\
\
\\subsubsection\{Analysis\}\
For some values of $r_\{include\}$, the number of cells used to compute average errors is lower than preferred, especially for $r_\{include\} = 2$ kilometers in the chart in figure \\ref\{fig:scalingR_900/1000_errors\}. Recall that the maximum number of measurements we can download for one cell through HTTP is 1000, even if OpenCellID has more measurements for that cell in their database. When we are running D-CTL and RSS-CTL with $r_\{include\} = 2$ kilometers and $m_\{min\}=900$ we are dependent of cells that have 900 or more measurements within a radius of 2,000 meters from the correct cell tower location. As we can see from figure \\ref\{fig:scalingR_900/1000_errors\}, only 58 of the cells in $S_\{correct\}$ had that property. On the other hand, the average error graphs in all three charts in figure \\ref\{fig:scalingR_100/200_errors\}, \\ref\{fig:scalingR_450/550_errors\} and \\ref\{fig:scalingR_900/1000_errors\} behave similar with respect to \\textit\{Error\}. Thus we can argue that 58 cells was enough.\
\
The average errors computed throughout this section are giving us very valuable information. Just as expected there is a gap between the average errors from D-CTL and RSS-CTL for $r_\{include\} = 35$ kilometers. We already knew this from our findings in section \\ref\{sect:constant_d_r\} and \\ref\{section:scalingD_timing\}. What we could only project, but not know, is that the graphs for the two different algorithms would converge for lower values of $r_\{include\}$. This means that a lot of the pairs of measurements we choose when computing $l_\{direction\}$ in D-DL with $r_\{include\}=35$ kilometers, form lines between them that are far from projecting the actual directions of the cells. We discussed this in theory in section \\ref\{sect:greaterAngles\}. When we reduce $r_\{include\}$ it seems that we prevent D-DL from choosing two measurements that form such a poor direction line. Or we have excluded all of the measurements that could cause such a poor direction line.\
\
Reducing $r_\{include\}$ results in lower average errors which are better results if we want to estimate cell tower locations as close as possible to the correct cell tower locations. This is essential if the goal is to use the estimated cell tower locations in other applications, such as localizing mobile devices. See section \\ref\{sect:applications\} and chapter \\ref\{chapt:RelatedWork\}. Now a dilemma occurs. Is it correct to exclude measurements to produce low errors? First we must consider the fact that the purpose of D-CTL and RSS-CTL is to estimate the location of cell towers we do not know the correct locations of. So how would we know if a measurement is far away from the cell tower or not, in that case? One possibility is to look at the signal strength, but this might not be a safe parameter. RSS can be affected by obstacles like buildings, other signals flowing through the air, or even the signal receiver in the mobile device. In short, this parameter may lie. Another possibility is to calculate the mean of the longitudes and latitudes of each cells' measurements, and use this as an origo for excluding measuremens that are too far away.\
\
But do we want to exclude measurements from the computations? We must remember that we are developing heuristics. In most cases it is very difficult to say how far away our estimated cell tower locations are from the correct ones. We must base our results and conclusions on the data that is available to us. If we manage to estimate a cell tower location so that every measurement belonging to the cell are not too far away from this location, and fits within the cell sector, our heuristic works. See the rules in section \\ref\{sect:heuristics\}. We can still calculate the distance from each measurement to the estimated cell tower location after this has been computed. If some measurements seems to be too far away from the estimated cell tower location, we can exclude them and run the algorithm again.\
\
\\section\{Bergen City Center: Estimating Cell Locations when These are Not Known\}\
%\\section\{Testing on Cells where the Correct Cell Tower Locations are Not Known: Bergen City Center\}\
\\label\{sect:testingOnBergen\}\
\
In this section we run RSS-CTL on cells where the correct cell tower locations are not known. The purpose of these tests are to suggest alternative cell tower locations to the suggested locations that already exist for the test cells. We will suggest new cell tower locations for the cells in $S_\{bergen\}$.\
\
%We run and compare the D-CTL, RSS-CTL and OpenCellID algorithms on $S_\{bergen\}$. We use the following constant parameters, which are also used for the estimated cell tower locations in figure \\ref\{fig:estimatedCellsBergen\}, \\ref\{fig:242-1-11011-12302_chosen\} and \\ref\{fig:242-2-11011-40768_chosen\}:\
We use the following constant parameters:\
\\begin\{itemize\}\
\\item $m_\{min\}=10$\
\\item $m_\{max\}=1000$\
\\item $d_\{extend\}=0.0001$\
\\item $r_\{include\}=35$km\
\\item if a cell's amount of measurements $|M|$ is equal to or larger than 80, $n=80$\
\\item if a cell's amount of measurements $|M|$ is less than 80, $n=|M|$\
\\end\{itemize\}\
%We use the following five values of $r_\{include\}$:\
%\\begin\{itemize\}\
%\\item $r_\{include\}=35,000$\
%\\item $r_\{include\}=25,000$\
%\\item $r_\{include\}=15,000$\
%\\item $r_\{include\}=10,000$\
%\\item $r_\{include\}=5,000$\
%\\item $r_\{include\}=2,000$\
%\\end\{itemize\}\
\
%\\begin\{figure\}[h!]\
%\\centering\
%\\includegraphics[scale=0.6]\{pictures/scalingR_bergen.png\}\
%\\caption\{Overview of average errors of estimated cell tower locations of cells in $S_\{bergen\}$.\}\
%\\label\{fig:scalingR_bergen\}\
%\\end\{figure\}\
\
%\\begin\{table\}[h!]\
%  \\center\
%  \\begin\{tabular\}\{|a|c|\}\
%    \\hline\
%    \\cellcolor[gray]\{0.9\}$r_\{include\}$&\\cellcolor[gray]\{0.9\}$M_\{miss\}$\\\\\\hline\
%    35,000 & 37.3\\% \\\\\\hline\
%    25,000 & 37.3\\% \\\\\\hline\
%    15,000 & 37.3\\% \\\\\\hline\
%    10,000 & 37.4\\% \\\\\\hline\
%    5,000 & 37.5\\% \\\\\\hline\
%    2,000 & 39.0\\% \\\\\\hline\
%  \\end\{tabular\}\
%  \\caption\{$M_\{miss\}$ for each value of $r_\{include\}$, for the cells in  $S_\{bergen\}$.\}\
%  \\label\{table:scalingR_bergen_miss\}\
%\\end\{table\}\
\
In section \\ref\{sect:validationBergen\} we described $S_\{bergen\}$. The number of cells in this set is 597. After running the validation procedure on each of the 597 cells, we are left with 120 cells. This is mostly because many of the cells has less than 10 measurements. The upside of this is that the map of Bergen will not be overly crowded with cell tower locations.\
\
\\subsubsection\{Analyzing Two Estimated Cell Tower Locations\}\
\
\\begin\{figure\}[h!]\
\\centering\
\\begin\{subfigure\}[t]\{0.45\\textwidth\}\
    \\centering\
   \\includegraphics[scale=0.42]\{pictures/242-1-11011-12302_opencellid.png\}\
\\caption\{The focus is on the cell tower location as estimated by OpenCellID.\}\
\\label\{fig:242-1-11011-12302_opencellid\}\
  \\end\{subfigure\}\
  \\hspace\{.03\\textwidth\}\
  \\begin\{subfigure\}[t]\{0.45\\textwidth\}\
    \\centering\
    \\includegraphics[scale=0.42]\{pictures/242-1-11011-12302_chosen.png\}\
\\caption\{The focus is on the cell tower location as estimated by RSS-CTL.\}\
\\label\{fig:242-1-11011-12302_chosen\}\
  \\end\{subfigure\}\
\\caption\{Cell 242-1-11011-12302. The blue circles represent measurements. The light blue marker represents the cell tower location as estimated by OpenCellID. The pink marker represents the cell tower location as estimated by RSS-CTL.\}\
\\label\{fig:242-1-11011-12302\}\
\\end\{figure\}\
\
In figure \\ref\{fig:242-1-11011-12302_opencellid\} and \\ref\{fig:242-1-11011-12302_chosen\} we can see one of the cells from $S_\{bergen\}$. Measurements, estimated cell tower location by OpenCellID and estimated cell tower location by RSS-CTL are shown. There is really no way of knowing how accurate the location estimated by RSS-CTL is. But if we look closely, we can see that it estimated the cell tower to be located just where \\textit\{Gulating Lagmannsrett\} is located. This is a large building that contains a court of law. A rooftop seems like an excellent spot for a cellular network provider to place a cell tower, because of the hight. The cell tower location estimated by OpenCellID is much less likely. The green area where OpenCellID estimated the location to be is a lawn, with no high structures. We therefore conclude that RSS-CTL estimated a likely cell tower location for this cell.\
\
\\begin\{figure\}[h!]\
\\centering\
\\begin\{subfigure\}[t]\{0.45\\textwidth\}\
    \\centering\
   \\includegraphics[scale=0.3]\{pictures/242-2-11011-40768_opencellid.png\}\
\\caption\{The focus is on the cell tower location as estimated by OpenCellID.\}\
\\label\{fig:242-2-11011-40768_opencellid\}\
  \\end\{subfigure\}\
  \\hspace\{.03\\textwidth\}\
  \\begin\{subfigure\}[t]\{0.45\\textwidth\}\
    \\centering\
    \\includegraphics[scale=0.3]\{pictures/242-2-11011-40768_chosen.png\}\
\\caption\{The focus is on the cell tower location as estimated by RSS-CTL.\}\
\\label\{fig:242-2-11011-40768_chosen\}\
  \\end\{subfigure\}\
\\caption\{Cell 242-2-11011-40768. The blue circles represent measurements. The light blue marker represents the cell tower location as estimated by OpenCellID. The pink marker represents the cell tower location as estimated by RSS-CTL.\}\
\\label\{fig:242-2-11011-40768\}\
\\end\{figure\}\
\
In figure \\ref\{fig:242-2-11011-40768_opencellid\} and \\ref\{fig:242-2-11011-40768_chosen\} we can see another cell from $S_\{bergen\}$. OpenCellID estimated the cell tower location of this cell to be in the middle of the water. That is not an accurate estimation. We can see that RSS-CTL estimated the cell tower location of this cell to be on dry land, which makes it a more likely location.\
\
\\subsubsection\{Estimating Cell Towers for the Bergen City Center\}\
\
\\begin\{figure\}[h!]\
\\centering\
\\includegraphics[scale=0.35]\{pictures/estimatedCellsBergen2.png\}\
\\caption\{Overview of 97 estimated cell tower locations of cells in $S_\{bergen\}$. The estimated cell tower locations are computed by RSS-CTL.\}\
\\label\{fig:estimatedCellsBergen\}\
\\end\{figure\}\
\
Figure \\ref\{fig:estimatedCellsBergen\} shows a map of the Bergen City Center. Not all of the 120 estimated cell tower locations are shown. Some are outside of the figure boundaries. We chose to not show the old cell tower locations estimated by OpenCellID as that would have made the map very crowded. In addition, it would have been very difficult to clarify which new and old estimated cell tower locations belonged to the same cell.\
\
We immediately see that some of the cell tower locations estimated by RSS-CTL cannot be very accurate as they are located in water areas. There may be several reasons for this, one being the algorithm itself. Based on the available measurements, RSS-CTL has not been able to estimate a valid cell tower location. Another possible reason is the distribution of the measurements belonging to each cell. It is clear that RSS-CTL works best when a cell's measurements are randomly distributed within the cell sector. If the measurements are distributed in any other way, that affects the accuracy of the estimated cell tower location. Especially combined with a low number of measurements. Last, RSS-CTL base it's estimated cell tower location on RSS values among measurements. If these values do not reflect the distance each measurement is located from the cell tower, that will affect the estimated cell tower location.\
\
\
\
\\section\{Chapter Review\}\
In this chapter we have presented and compared average errors of estimated cell tower locations of real cells, computed by the D-CTL, RSS-CTL and OpenCellID algorithms. We have experimented with different values for several parameters to learn how the algorithms scale. We have also used RSS-CTL to estimate cell tower locations in the Bergen City Center. To improve the D-CTL and RSS-CTL algorithms we need to analyze some cells and consider some of the more regular measurement distribution patterns. We also need to pay attention to the individual measurements that are causing high errors. These are probably the ones furthest away from the correct cell tower locations. Or the ones far from the other measurements belonging to the same cell, possibly close to the cell edges.\
\
\\chapter\{Analysis and Improvements\}\
\\label\{chapt:improvements\}\
\
In this chapter we analyze two cells with different measurement distribution patterns. We run the D-CTL, RSS-CTL and the OpenCellID algorithms on both cells and anylyze their estimated cell tower locations. Next we propose how D-CTL and RSS-CTL can be improved. We end the chapter by concluding the thesis.\
\
\\section\{Analyzing Measurement Distributions\}\
In chapter \\ref\{chap:results\} we presented average errors of estimated cell tower locations from running the D-CTL, RSS-CTL and OpenCellID algorithms. We ask the following question: What is affecting the average errors of estimated cell tower locations? We will now analyze the measurement patterns and estimated cell tower locations of two different cells with correct cell tower locations. One where the measurements are scattered and one where they are more structured.\
\
The following parameters are used when running the algorithms on the two cells:\
\\begin\{itemize\}\
\\item $n=80$\
\\item $d_\{extend\}=0.0001$\
\\item $r_\{include\}=35$km\
\\end\{itemize\}\
\
\\subsection\{Pattern 1: Cell with Scattered Measurements\}\
\\label\{sect:pattern1\}\
We analyze the following cell, which is displayed in figure \\ref\{fig:pattern_messy\}:\
\\begin\{description\}\
\\item[MCC:] 262\
\\item[NET:] 7\
\\item[AREA:] 30605\
\\item[CELL:] 342\
\\end\{description\}\
\
\\begin\{figure\}[h!]\
\\centering\
\\includegraphics[scale=0.39]\{pictures/pattern_messy.png\}\
\\caption\{Cell 262-7-30605-342.\}\
\\label\{fig:pattern_messy\}\
\\end\{figure\}\
\
\\paragraph\{Measurements Analysis\}\
As we can see from figure \\ref\{fig:pattern_messy\}, the measurements of this cell is scattered to all directions of the correct cell tower location, which is represented by the light blue marker. We immediately notice the measurement far away from the cell tower, in the lower left corner. This measurement is approximately 60 kilometers away from the correct cell tower location. Assuming that $r_\{include\}$ is active, with maximum value equal to 35 kilometers, this measurement will be marked as invalid and will not be considered when running D-CTL, RSS-CTL or the OpenCellID algorithm. See section \\ref\{sect:cleaning\}. The measurements in the upper right corner is approximately 32 kilometers away from the correct cell tower location, and will be considered when $r_\{include\}=35$ kilometers.\
\
\\subsubsection\{D-CTL\}\
We run D-CTL on the cell. The result is displayed in figure \\ref\{fig:pattern_messy_distance_35000\}, where the pink marker represents the estimated cell tower location. The error is 33.5 kilometers.\
\
\\begin\{figure\}[h!]\
\\centering\
\\includegraphics[scale=0.42]\{pictures/pattern_messy_distance_35000.png\}\
\\caption\{Cell 262-7-30605-342. D-CTL has estimated a cell tower location.\}\
\\label\{fig:pattern_messy_distance_35000\}\
\\end\{figure\}\
\
By examining the estimated cell tower location we can see that the sub-routine D-DL has computed a $l_\{direction\}$ between the two measurements furthest apart from each other. After this the sub-routine FS computed two cell sectors. The sub-routine D-CD has chosen one of the two cell sectors with corresponding cell tower location, but the wrong one. We designed D-CD so it would pick the cell sector whose cell tower location was closest to the correct cell tower location. It clearly did not do that. Figure \\ref\{fig:pattern_messy_distance_35000_both\} shows both of the two estimated cell tower locations computed by FS. In theory, the one to the left in the figure was supposed to be chosen by D-CD. Why was it not?\
\
To answer this question we must look into D-CD. This sub-routine assumes that the measurements are randomly distributed within the correct cell sector. In this cell, they are not. Look at the estimated cell tower location to the right in figure \\ref\{fig:pattern_messy_distance_35000_both\}. The little cluster of measurements at that location is really close to that estimated cell tower location. The rest of the measurements are closer to the estimated cell tower location to the left, and more spread out. Say we calculate the mean of the least possible distances from the few mesurements closer to the estimated cell tower location to the right in the figure, to $l_\{direction\}$. Then we calculate the mean of the least possible distances from the mesurements closer to the estimated cell tower location to the left in the figure, to $l_\{direction\}$. It is very likely that the former mean is lesser than the latter. That is why D-CD fail.\
\
\\begin\{figure\}[h!]\
\\centering\
\\includegraphics[scale=0.42]\{pictures/pattern_messy_distance_35000_both.png\}\
\\caption\{Cell 262-7-30605-342. We show both estimated cell tower locations computed by FS during the execution of D-CTL.\}\
\\label\{fig:pattern_messy_distance_35000_both\}\
\\end\{figure\}\
\
\\subsubsection\{RSS-CTL\}\
We run RSS-CTL on the cell. The result is displayed in figure \\ref\{fig:pattern_messy_RSS_35000\} where the pink marker represents the estimated cell tower location. The error is 22.6 kilometers. Here, RSS-DL computed a completely different $l_\{direction\}$ than D-DL. We can see that the two sub-routines computed two versions of $l_\{direction\}$ that are close to be perpendicular to each other.\
\
\\begin\{figure\}[h!]\
\\centering\
\\includegraphics[scale=0.42]\{pictures/pattern_messy_RSS_35000.png\}\
\\caption\{Cell 262-7-30605-342. RSS-CTL has estimated a cell tower location.\}\
\\label\{fig:pattern_messy_RSS_35000\}\
\\end\{figure\}\
\
RSS-CTL worked as it was supposed to. RSS-DL found the two measurements with the largest difference in RSS. Then two possible estimated cell sectors with corresponding cell tower locations were computed by FS. One of them were chosen by RSS-CD. But the error is still very large. Why is that?\
\
Figure \\ref\{fig:pattern_messy_RSS_35000_both\} shows both of the two estimated cell tower locations computed by FS. We clearly see that RSS-CD in fact chose the estimated cell tower location closest to the correct cell tower location. The reason for the large error can be found by examining the measurements. After RSS-DL computed $l_\{direction\}$ in the current way, FS had to extend it by a large distance to be able to fit the group of measurements far to the right in figure \\ref\{fig:pattern_messy_RSS_35000_both\}, within a $120^\{\\circ\}$ cell sector. If RSS-DL had computed a $l_\{direction\}$ looking more like the one D-DL computed in figure \\ref\{fig:pattern_messy_distance_35000_both\}, the error would have been decreased.\
\
\\begin\{figure\}[h!]\
\\centering\
\\includegraphics[scale=0.42]\{pictures/pattern_messy_RSS_35000_both.png\}\
\\caption\{Cell 262-7-30605-342. We show both estimated cell tower locations computed by FS during the execution of RSS-CTL.\}\
\\label\{fig:pattern_messy_RSS_35000_both\}\
\\end\{figure\}\
\
\\subsubsection\{OpenCellID Algorithm\}\
We run the OpenCellID algorithm on the cell. The result is displayed in figure \\ref\{fig:pattern_messy_averaged_35000\} where the pink marker represents the estimated cell tower location. The error is 2.6 kilometers.\
\
\\begin\{figure\}[h!]\
\\centering\
\\includegraphics[scale=0.42]\{pictures/pattern_messy_averaged_35000.png\}\
\\caption\{Cell 262-7-30605-342. The OpenCellID algorithm has estimated a cell tower location.\}\
\\label\{fig:pattern_messy_averaged_35000\}\
\\end\{figure\}\
\
It is not strange this approach gave the estimated cell tower location with the lowest error. The measurement distribution of this cell, where they are scattered to every direction of the correct cell tower location, is perfect for this kind of estimation approach.\
\
\\subsubsection\{Conclusion\}\
This cell is clearly omnidirectional. We draw this conclusion from the fact that the measurements are localized in every direction from the correct cell tower location, and not within a $120^\{\\circ\}$ cell sector. The D-CTL and RSS-CTL algorithms were not designed to estimate cell tower locations for this kind of cell. Estimated cell tower locations from these two algorithms on this kind of cell will very often have large errors. For omnidirectional cells, Weighted Centroid is a better alternative. See section \\ref\{sect:paper1\}.\
\
\\subsection\{Pattern 2: Cell with Structured Measurements\}\
We analyze the following cell, which is displayed in figure \\ref\{fig:pattern_structured\}:\
\
\\begin\{description\}\
\\item[MCC:] 260\
\\item[NET:] 1\
\\item[AREA:] 29001\
\\item[CELL:] 22095\
\\end\{description\}\
\
\\begin\{figure\}[h!]\
\\centering\
\\includegraphics[scale=0.6]\{pictures/pattern_structured.png\}\
\\caption\{Cell 260-1-29001-22095.\}\
\\label\{fig:pattern_structured\}\
\\end\{figure\}\
\
\\paragraph\{Measurement Analysis\}\
As we can see from figure \\ref\{fig:pattern_structured\}, the measurements of this cell are more structured than the cell analyzed in section \\ref\{sect:pattern1\}. They are clearly within a $120^\{\\circ\}$ cell sector from the correct cell tower location, which is represented by the light blue marker. This cell almost appear forged by the way these measurements form an almost straight path.\
\
\\subsubsection\{D-CTL\}\
We run the D-CTL algorithm on the cell. The result is displayed in figure \\ref\{fig:pattern_structured_distance_35000\}, where the pink marker represents the estimated cell tower location. The error is 0.925 kilometers.\
\
\\begin\{figure\}[h!]\
\\centering\
\\includegraphics[scale=0.6]\{pictures/pattern_structured_distance_35000.png\}\
\\caption\{Cell 260-1-29001-22095. D-CTL has estimated a cell tower location.\}\
\\label\{fig:pattern_structured_distance_35000\}\
\\end\{figure\}\
\
We can see that the D-CTL algorithm has worked as it is supposed to. The estimated cell tower is located by the measurement at the end of the measurent path close to the upper boundary of the figure. This means D-DL chose the two measurements furthest apart from each other to be the endpoints of $l_\{direction\}$. Then FS computed the two estimated cell sectors, and D-CD picked the one whose cell tower location was closest to the correct cell tower location. Figure \\ref\{fig:pattern_structured_distance_35000_both\}, which displays both of the two estimated cell tower locations computed by FS, confirms this hypothesis.\
\
\\begin\{figure\}[h!]\
\\centering\
\\includegraphics[scale=0.6]\{pictures/pattern_structured_distance_35000_both.png\}\
\\caption\{Cell 260-1-29001-22095. We show both estimated cell tower locations computed by FS during the execution of D-CTL.\}\
\\label\{fig:pattern_structured_distance_35000_both\}\
\\end\{figure\}\
\
Even though the error is small and the D-CTL algorithm works as expected, there are still room for improvements. Recall that the D-CTL and RSS-CTL algorithms assume measurements are randomly distributed within their respective cell sectors. When the measurements form an almost straight path such as these do, with no measurements above or below the path, the D-CTL algorithm will always estimate the cell tower location to be at one of the ends of the path. This time, the error is only small because the correct cell tower location is close to the one of the ends of the path. If some measurements were to be located away from the path, the algorithm would have had other measurements to base $l_\{direction\}$ on.\
\
\\subsubsection\{RSS-CTL\}\
We run RSS-CTL on the cell. The result is displayed in figure \\ref\{fig:pattern_structured_RSS_35000\}, where the pink marker represents the estimated cell tower location. The error is 0.922 kilometers.\
\
\\begin\{figure\}[h!]\
\\centering\
\\includegraphics[scale=0.6]\{pictures/pattern_structured_RSS_35000.png\}\
\\caption\{Cell 260-1-29001-22095. RSS-CTL has estimated a cell tower location.\}\
\\label\{fig:pattern_structured_RSS_35000\}\
\\end\{figure\}\
\
RSS-CTL estimated the cell tower location to be almost at the same spot as D-CTL did. This is as expected, as the measurements at that spot are the closest ones to the correct cell tower location, and thus should have the strongest RSS. This means that RSS-DL successfully computed a $l_\{direction\}$ between the pair of measurements with the largest difference in RSS between them. Then RSS-CD chose the one of the two estimated cell sectors whose cell tower location was closest to the correct cell tower location. Figure \\ref\{fig:pattern_structured_RSS_35000_both\}, which displays both of the two possible estimated cell tower locations, confirms this.\
\
\\begin\{figure\}[h!]\
\\centering\
\\includegraphics[scale=0.56]\{pictures/pattern_structured_RSS_35000_both.png\}\
\\caption\{Cell 260-1-29001-22095. We show both estimated cell tower locations computed by FS during the execution of RSS-CTL.\}\
\\label\{fig:pattern_structured_RSS_35000_both\}\
\\end\{figure\}\
\
The problem is still the assumption of randomly distributed measurements. When the measurements form an almost straight path, the RSS-CTL algorithm will estimate the cell tower location to be at one of the ends of the path. RSS-DL will create $l_\{direction\}$ from two measurements in the path. FS will extend $l_\{direction\}$ to both directions to compute two cell sectors. When $l_\{direction\}$ is extended as far as to one of the ends of the path, every measurement will fit within a cell sector.\
\
\\subsubsection\{OpenCellID Algorithm\}\
We run the OpenCellID algorithm on the cell. The result is displayed in figure \\ref\{fig:pattern_structured_averaged_35000\} where the pink marker represents the estimated cell tower location. The error is 2.3 kilometers.\
\
\\begin\{figure\}[h!]\
\\centering\
\\includegraphics[scale=0.6]\{pictures/pattern_structured_averaged_35000.png\}\
\\caption\{Cell 260-1-29001-22095. The OpenCellID algorithm has estimated a cell tower location.\}\
\\label\{fig:pattern_structured_averaged_35000\}\
\\end\{figure\}\
\
This approach does not work well for this kind of cell. We can see that the estimated cell tower by this approach is located close to the middle of the path of measurements. For this kind of measurement pattern the D-CTL and RSS-CTL algorithms estimate better locations.\
\
\\subsubsection\{Conclusion\}\
D-CTL and RSS-CTL work well on this cell. They manage to estimate cell tower locations close to the measurements and close to the correct cell tower location. There are still room for improvements. Estimated cell tower locations at one of the ends of such a path-like measurement pattern is not necessarily good. For this specific cell, D-CTL and RSS-CTL estimated cell tower locations not far from the correct cell tower location. But the correct cell tower location might not always be located that close to the measurements.\
\
\\section\{Improvements\}\
We can improve the D-CTL and RSS-CTL algorithms i several ways. Every sub-routine can be improved so that they all execute their tasks better.\
\
\\subsubsection\{Measurement Distribution\}\
The most fundamental improvement we can do involves learning more about the measurement distribution for each cell. Say we can algorithmically find out how the measurements are distributed for a cell. Then we can base choices done throughout the algorithms on this information. It is clear that D-CTL and RSS-CTL works better on some cells than others. For example would Weighted Centroid work much better on omnidirectional cells than our two algorithms. See section \\ref\{sect:paper1\} and \\ref\{sect:applyingTechniques\}. This means information about measurement distribution even will help with the choice of which algorithm that would be most effective.\
\
Another reason for learning more about each cell's measurement distribution is to detect the individual measurements within cells that will affect the accuracy of estimated cell tower locations negatively. We saw examples of such measurements in figure \\ref\{fig:pattern_messy\}. We did try one approach for detecting such measurements. The purpose of $r_\{include\}$ is to exclude measurements that are too far away to be valid. See section \\ref\{sect:cleaning\}. We also experimented with different values of $r_\{include\}$ in section \\ref\{sect:scalingROnRealCells\} to see how that would affect the accuracy of estimated cell tower locations. But this approach is simple and rough. We need an approach that can single out individual measurements that will affect the accuracy of the algorithms negatively, no matter how far away they are or to which direction they are located, from the correct cell tower location.\
\
It would also help if the information included in measurements were more complete. In advance of running D-CTL and RSS-CTL on real cells in chapter \\ref\{chap:results\}, we had to run a validation procedure for each measurement and each cell. The validation procedures are described in section \\ref\{label:correctCells\} and \\ref\{sect:validationBergen\}. These procedures lead to an exclution of many measurements and cells. Recall that several data fields for a cell are dependent of information included in measurements. So if measurements were more complete, they could have provided additional and more accurate information about the cell tower location. Take for example the \\textit\{ta\} (Timing Advance) data field included in the measurement object described in table \\ref\{table:measurement\}. This is one of the data fields very few measurements has recorded values for. The timing advance value corresponds to the length of time a signal takes to reach the cell tower from a mobile device. To utilize this could have been an even more accurate way than utilizing RSS, to estimate cell tower locations.\
\
\\subsubsection\{D-DL/RSS-DL\}\
D-DL and RSS-DL are the two most important sub-routines in D-CTL and RSS-CTL, respectively. These sub-routines form the basis for where a cell tower location will be estimated to be. These sub-routines compute the line $l_\{direction\}$ from two chosen measurements. Sometimes they compute very poor lines, often as a result of bad luck when randomly pairing the measurements. One improvement is to upgrade the sub-routines to sample more than one $l_\{direction\}$. By comparing multiple direction lines we can find those that stand out and decrease the chance of choosing a poor $l_\{direction\}$. Or we can take multiple direction lines and compute some sort of average direction line from these.\
\
\\subsubsection\{FS/CS\}\
CS has a very specific task, and is difficult to improve. FS on the other hand can be improved. Recall that FS performs several iterations. For each iteration we check if each measurement of a cell fits within a cell sector computed by CS based on $l_\{direction\}$. If not, then $l_\{direction\}$ is extended and a new cell sector is computed by CS. When checking if each measurement fits within a computed cell sector, an improvement is to also rotate the cell sector around the corresponding estimated cell tower location. Then FS also checks if each measurement fits when the cell sector rotates. When changing the angles of the cell edges like this, we might elliminate the need to extend $l_\{direction\}$ by a good distance. The reason for not being able to fit each measurement is not always because they cannot be fit within a $120^\{\\circ\}$ cell sector from the current estimated cell tower location. It is often because of the angles of the cell edges. This is just because of an unlucky computation of $l_\{direction\}$.\
\
\\subsubsection\{D-CD/RSS-CD\}\
D-CD and RSS-CD are not part of the process of computing the estimated cell sectors and cell tower locations. The purpose of these sub-routines is to decide which one of the estimated cell sectors with corresponding cell tower locations, are the best. Improving these sub-routines would involve giving them more information to base their decisions on. As of now, D-CD and RSS-CD operate with the parameter $n$ to choose a subset of measurements to use when deciding which cell sector is the best. In section \\ref\{section:scalingD_timing\}, we measured running times for D-CTL and RSS-CTL. We found out that computing an estimated cell tower location with one of the algorithms, takes very little time. We can therefore with good conscience use every measurement belonging to a cell, and not just a subset, when deciding which estimated cell sector to pick. This also applies to D-DL and RSS-DL.\
\
\\subsubsection\{Multiple Cells Considered Together During Computation\}\
Until now we have only considered cells individually when computing estimated cell tower locations. There are several ways to consider multiple cells together to potentially improve the accuracy of the locations. The techniques described in section \\ref\{sect:paper1\} and \\ref\{sect:paper2\} are examples of techniques that include the consideration of multiple cells together. The difference from the problems those techniques are solutions to, and our problem, is that they are based on measurement data collected with wardriving. We ask the following question: How can we consider multiple cells together based on measurement data from OpenCellID?\
\
\\paragraph\{Cells Share Cell Tower\}\
We can apply the third step in the Bounding Technique described in section \\ref\{sect:paper1\}, Tower-based Regrouping, to our problem. In this step, cells that share a cell tower is considered together, thus simulating a $360^\{\\circ\}$ cell. When the measurements within these cells are combined, the Weighted Centroid algorithm can estimate the cell tower location with good accuracy. The problem with the data provided by OpenCellID is that we cannot know which cells share a cell tower. OpenCellID states that the identification number for each cell says something about which cell tower it belongs to, but there are too many identification schemes among the cellular network providers in each country to be able to know how to look for it. This is the data field \\textit\{cell\} in table \\ref\{table:cell\}. In addition to this, it is impossible to know if cells are missing or just do not exist as OpenCellID does not have an overview of every cell in the world. When searching for a cell to complete a $360^\{\\circ\}$ radius around a cell tower, we cannot know whether it exists in the database or not.\
\
\\paragraph\{Grid or Hexagon\}\
Another way to improve the estimated cell tower locations is to look at the estimated locations of several cell towers within an area. We evaluate the estimated locations of each individual cell tower relative to the other cell towers. Recall that section \\ref\{sect:paper2\} describes a technique where each cell tower is placed on a grid, and every cell tower's location is re-evaluated when a new one is added to the grid. In addition, we described a theoretical structure of cell towers as a system of hexagons in section \\ref\{sect:cell\}. Evaluating cells as an organized system can help us estimate individual cell tower locations based on more than individual cell data. The measurements provide valuable information for this task. Lets assume the closest cell tower to a large subset of the measurements within a cell, is the cell tower the measurements belong to. Then, if we have estimated another cell tower's location to be closer to each measurement in that subset, we get a contradiction. See figure \\ref\{fig:cellSystem-overlap\}. Naturally, the direction of the cell sectors also has to be considered. See figure \\ref\{fig:cellSystem-close\}. Thus, the cell tower locations can be adjusted so that the system of cells is valid. But can we assume cells are organized relative to each other in the first place? In section \\ref\{sect:cell\} we briefly discussed theoretical locations of cell towers compared to locations in reality. We mentioned several factors affecting the practical locations of cell towers. In addition to this, time is important to consider. The demand for good reception has been growing vastly the last decades, and new cell towers must be added to satisfy this demand. Adding new cell towers over time makes it difficult to maintain a theoretical system of cells. For example, new infrastructure like buildings or tunnels may prevent a former cell tower location from still being beneficial, or even an option. Or a sudden growth in population within an area may require a new cell tower location that does not match the theoretical system. This means we cannot take a theoretical cell system for granted in reality.\
\
\\begin\{figure\}[h!]\
\\centering\
  \\begin\{subfigure\}[t]\{0.45\\textwidth\}\
    \\centering\
    \\includegraphics[scale=0.5]\{pictures/cellSystem-overlap.png\}\
    \\caption\{Too much overlap. Cell tower locations need to be re-adjusted.\}\
    \\label\{fig:cellSystem-overlap\}\
  \\end\{subfigure\}\
  \\hspace\{.03\\textwidth\}\
  \\begin\{subfigure\}[t]\{0.45\\textwidth\}\
    \\centering\
    \\includegraphics[scale=0.5]\{pictures/cellSystem-close.png\}\
    \\caption\{Measurements are closer to another cell tower than their own, but the cells have different directions.\}\
    \\label\{fig:cellSystem-close\}\
  \\end\{subfigure\}\
\\caption\{Examples of how two cell towers can and cannot be located relative to each other.\}\
\\label\{fig:cellSystem-relative\}\
\\end\{figure\}\
\
\\section\{Conclusion\}\
In section \\ref\{sect:researchQuestions\} we defined the research questions for this thesis. With this thesis we wanted to:\
\\begin\{itemize\}\
\\item briefly identify existing techniques and approaches for localizing cell towers, and \
\\item develop our own algorithm for estimating cell tower locations and test it on real data provided by OpenCellID.\
\\end\{itemize\}\
In chapter \\ref\{chapt:RelatedWork\} we presented two papers, each containing a technique for localizing cell towers based on measurement data obtained from wardriving. We could not find any related work concerning localization of cell towers based on measurement data obtained from crowdsourcing. But we discussed if and how the wardriving data techinques could be applied to crowdsourced data. The conclusion was that the crowdsourced data provided by OpenCellID did not have the neccessary properties for this to be possible.\
\
In chapter \\ref\{chapt:D-CTL\} and \\ref\{chapt:RSS-CTL\} we developed two algorithms, D-CTL and RSS-CTL, for localizing cell towers based on data obtained from crowdsourcing. The two algorithms are very similar. D-CTL utilizes the distance between a cell's measurements. RSS-CTL utilized the RSS values among a cell's measurements. We have tested the two algorithms on theoretical generated test data in chapter \\ref\{chapt:D-CTL\} and \\ref\{chapt:RSS-CTL\}, and on real data provided by OpenCellID in chapter \\ref\{chap:results\}. We knew the correct cell tower locations on both occasions. We measured the accuracy of the algorithms by comparing the estimated cell tower locations to the correct cell tower locations. With both generated and real data, RSS-CTL estimated the most accurate cell tower locations. We also estimated cell tower locations with RSS-CTL for the Bergen City Center area.\
\
In this chapter we have analyzed two cells with different measurement distribution patterns. We let D-CTL, RSS-CTL and the OpenCellID algorithm estimate cell tower locations for both cells. We then analyzed how the algorithms computed the estimated locations and compared them to each other. In the end we proposed several ways of how D-CTL and RSS-CTL can be improved further.\
\
\
\
\\newpage\
%\\bibliographystyle\{abbrv\}\
%\\bibliography\{references\}\
\\addcontentsline\{toc\}\{chapter\}\{Bibliography\}\
\\printbibliography\
\
%\\newpage\
%\\appendix\
\
%\\chapter\{Code\}\
\
\\end\{document\}}